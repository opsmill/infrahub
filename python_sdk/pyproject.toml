[tool.poetry]
name = "infrahub-sdk"
version = "0.8.1"
description = "Python Client to interact with Infrahub"
authors = ["OpsMill <contact@opsmill.com>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://opsmill.io"
repository = "https://opsmill.io"
documentation = "https://opsmill.io"
packages = [
    {include = "infrahub_sdk"}
]
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.8"
httpx = "^0.23"
rich = "^13.3"
pendulum = [
    { version = ">=2.1", python = ">=3.8,<3.12" },
    { version = "~3.0", python = ">=3.12" }
]
typer = "^0.7"
Jinja2 = "^3.1.3"
toml = "^0.10.2"
jsonlines = "^3.1"
deepdiff = "^6.2"
ujson = "^5.7"
pydantic = ">=1.7.4,!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0"
pyyaml = "^6.0"
gitpython = "^3.1.41"
pyarrow = "^14.0.1"
numpy = [
    { version = "^1.24.2", python = ">=3.8,<3.12" },
    { version = "^1.26.2", python = ">=3.12" }
]
graphql-core = "^3.2.3"
pytest = "*"

[tool.poetry.group.dev.dependencies]
pytest-clarity = "^1.0.1"
pytest-cov = "^4.0.0"
pytest-httpx = "*"
yamllint = "*"
pylint = "*"
mypy = "*"
ipython = "*"
pytest-asyncio = "*"
requests = "*"
pre-commit = "^2.20.0"
autoflake = "*"
types-toml = "*"
types-ujson = "*"
types-pyyaml = "*"
typer-cli = "*"
ruff = "^0.1.5"
pytest-xdist = "^3.3.1"
types-python-slugify = "^8.0.0.3"

[tool.poetry.scripts]
infrahubctl = "infrahub_sdk.ctl.cli:app"

[tool.poetry.plugins."pytest11"]
"pytest-infrahub"="infrahub_sdk.pytest_plugin.plugin"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "raise NotImplementedError()"
]

[tool.pylint.general]
extension-pkg-whitelist = [
    "pydantic",
    "ujson",
]

[tool.pylint.format]
disable = "logging-fstring-interpolation"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions.
no-docstring-rgx="^(_|test_)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
disable = """,
    line-too-long,
    missing-module-docstring,
    missing-function-docstring,
    missing-class-docstring,
    consider-using-from-import,
    invalid-name,
    too-many-arguments,
    too-many-locals,
    keyword-arg-before-vararg,
    too-few-public-methods,
    too-many-instance-attributes,
    fixme,
    consider-using-f-string,
    protected-access,
    import-self,
    wrong-import-order,
    """

[tool.pylint.miscellaneous]
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint.similarities]
min-similarity-lines = 20

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "tests"
]
filterwarnings = [
    "ignore:Module already imported so cannot be rewritten",
    "ignore:the imp module is deprecated",
    "ignore:Deprecated call to",
]
addopts = "-vs --cov-report term-missing --cov-report xml --dist loadscope"

[tool.mypy]
pretty = true
ignore_missing_imports = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.analyzer"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.utils"
ignore_errors = true

[tool.ruff]
line-length = 120

exclude = [
        ".git",
        ".tox",
        ".venv",
        "env",
        "_build",
        "build",
        "dist",
        "examples",
]

task-tags = [
    "FIXME",
    "TODO",
    "XXX",
]

[tool.ruff.lint]
preview = true

select = [
    "C90",  # mccabe complexity
    "DJ",   # flake8-django
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "I",    # isort-like checks
    "ICN",  # flake8-import-conventions
    "PL",   # pylint
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "TCH",  # flake8-type-checking
    "TRIO", # flake8-trio
    "T10",  # flake8-debugger
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]

ignore = [

##################################################################################################
# The ignored rules below should be removed once the code has been updated, they are included    #
# like this so that we can reactivate them one by one. Alternatively ignored after further       #
# investigation if they are deemed to not make sense.                                            #
##################################################################################################
    "PLC0415", # `import` should be at the top-level of a file
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0917", # Too many positional arguments
    "PLR2004", # Magic value used in comparison this could possibly be fine in the tests folders
    "PLR6201", # Use a `set` literal when testing for membership
    "PLR6301", # Method could be a function, class method, or static method
    "PLW0603", # Using the global statement to update `SETTINGS` is discouraged
    "PLW1641", # Object does not implement `__hash__` method
]


#https://docs.astral.sh/ruff/formatter/black/
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["infrahub_sdk", "infrahub_ctl"]

[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.ruff.mccabe]
# Target max-complexity=10
max-complexity = 17

[tool.ruff.per-file-ignores]

"tests/unit/sdk/test_client.py" = [
    "W293", # Blank line contains whitespace (used within output check)
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
