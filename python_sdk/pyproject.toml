[tool.poetry]
name = "infrahub-sdk"
version = "0.13.0"
description = "Python Client to interact with Infrahub"
authors = ["OpsMill <info@opsmill.com>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://opsmill.com"
repository = "https://github.com/opsmill/infrahub"
documentation = "https://docs.infrahub.app/python-sdk/"
packages = [{ include = "infrahub_sdk" }]
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = ">=2.0.0,!=2.0.1,!=2.1.0,<3.0.0"
pydantic-settings = ">=2.0"
graphql-core = ">=3.1,<3.3"
httpx = [
    { version = ">=0.20", python = ">=3.9,<3.11" },
    { version = ">=0.23", python = ">=3.11" },
]
pendulum = [
    { version = ">=2", python = ">=3.9,<3.12" },
    { version = ">=3", python = ">=3.12" },
]
gitpython = "^3"
ujson = "^5"
Jinja2 = { version = "^3", optional = true }
numpy = [
    { version = "^1.24.2", optional = true, python = ">=3.9,<3.12" },
    { version = "^1.26.2", optional = true, python = ">=3.12" },
]
pyarrow = { version = "^14", optional = true }
rich = { version = "^13", optional = true }
toml = { version = "^0.10", optional = true }
typer = { version = "^0.12.3", optional = true }
pytest = { version = "*", optional = true }
pyyaml = { version = "^6", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-asyncio = "<0.23"
pytest-clarity = "^1.0.1"
pytest-cov = "^4.0.0"
pytest-httpx = ">=0.30"
yamllint = "*"
pylint = "*"
mypy = "*"
ipython = "*"
requests = "*"
pre-commit = "^2.20.0"
types-toml = "*"
types-ujson = "*"
types-pyyaml = "*"
ruff = "0.5.0"
pytest-xdist = "^3.3.1"
types-python-slugify = "^8.0.0.3"

[tool.poetry.extras]
ctl = ["Jinja2", "numpy", "pyarrow", "pyyaml", "rich", "toml", "typer"]
tests = ["Jinja2", "pytest", "pyyaml", "rich"]
all = [
    "Jinja2",
    "numpy",
    "pyarrow",
    "pytest",
    "pyyaml",
    "rich",
    "toml",
    "typer",
]

[tool.poetry.scripts]
infrahubctl = "infrahub_sdk.ctl.cli:app"

[tool.poetry.plugins."pytest11"]
"pytest-infrahub" = "infrahub_sdk.pytest_plugin.plugin"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:", "raise NotImplementedError()"]

[tool.pylint.general]
extension-pkg-whitelist = ["pydantic", "ujson"]

[tool.pylint.format]
disable = "logging-fstring-interpolation"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions.
no-docstring-rgx = "^(_|test_)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
# Rules already covered by RUFF
# - too-many-statements
disable = """,
    line-too-long,
    missing-module-docstring,
    missing-function-docstring,
    missing-class-docstring,
    consider-using-from-import,
    invalid-name,
    too-many-arguments,
    too-many-locals,
    keyword-arg-before-vararg,
    too-few-public-methods,
    too-many-instance-attributes,
    too-many-statements,
    fixme,
    consider-using-f-string,
    protected-access,
    import-self,
    wrong-import-order,
    multiple-statements,
    """

[tool.pylint.miscellaneous]
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint.similarities]
min-similarity-lines = 20

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
filterwarnings = [
    "ignore:Module already imported so cannot be rewritten",
    "ignore:Deprecated call to",
]
addopts = "-vs --cov-report term-missing --cov-report xml --dist loadscope"

[tool.mypy]
pretty = true
ignore_missing_imports = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.check"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.cli_commands"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.exporter"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.generator"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.importer"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.schema"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.ctl.utils"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub_sdk.utils"
ignore_errors = true

[tool.ruff]
line-length = 120

exclude = [
    ".git",
    ".tox",
    ".venv",
    "env",
    "_build",
    "build",
    "dist",
    "examples",
]


[tool.ruff.lint]
preview = true

task-tags = ["FIXME", "TODO", "XXX"]

select = [
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "C90",   # mccabe complexity
    "DJ",    # flake8-django
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "I",     # isort-like checks
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "N",     # pep8-naming
    "PERF",  # Perflint
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "S",     # flake8-bandit
    "TCH",   # flake8-type-checking
    "T10",   # flake8-debugger
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
]

ignore = [
    ##################################################################################################
    # The ignored rules below should be removed once the code has been updated, they are included    #
    # like this so that we can reactivate them one by one. Alternatively ignored after further       #
    # investigation if they are deemed to not make sense.                                            #
    ##################################################################################################
    "B007",    # Loop control variable `result` not used within loop body
    "B008",    #  Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    "B904",    # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "B018",    # Found useless attribute access. Either assign it to a variable or remove it.
    "C408",    # Unnecessary `dict` call (rewrite as a literal)
    "C414",    # Unnecessary `list` call within `sorted()`
    "N802",    # Function name should be lowercase
    "N806",    # Variable in function should be lowercase
    "PERF102", # When using only the values of a dict use the `values()` method
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PERF401", # Use a list comprehension to create a transformed list
    "PLC0206", # Extracting value from dictionary without calling `.items()`
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0917", # Too many positional arguments
    "PLR2004", # Magic value used in comparison
    "PLR6201", # Use a `set` literal when testing for membership
    "PLR6301", # Method could be a function, class method, or static method
    "PLW0603", # Using the global statement to update `SETTINGS` is discouraged
    "PLW1641", # Object does not implement `__hash__` method
    "PTH100",  # `os.path.abspath()` should be replaced by `Path.resolve()`
    "PTH109",  # `os.getcwd()` should be replaced by `Path.cwd()`
    "RET504",  # Unnecessary assignment to `data` before `return` statement
    "S105",    # Possible hardcoded password assigned to: "PASS"
    "S108",    # Probable insecure usage of temporary file or directory
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S701",    # By default, jinja2 sets `autoescape` to `False`. Consider using `autoescape=True`
    "UP007",   # Use X | Y for type annotations
    "UP031",   # Use format specifiers instead of percent format
    "UP034",   # Avoid extraneous parentheses
]


#https://docs.astral.sh/ruff/formatter/black/
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["infrahub_sdk", "infrahub_ctl"]

[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.ruff.lint.mccabe]
# Target max-complexity=10
max-complexity = 17

[tool.ruff.lint.per-file-ignores]

"infrahub_sdk/**/*.py" = [
    ##################################################################################################
    # Review and change the below later                                                              #
    ##################################################################################################
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # ANN201 Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
]


"tests/**/*.py" = [
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected
    "S106",    # Possible hardcoded password assigned to variable
    "S106",    # Possible hardcoded password assigned to argument

    ##################################################################################################
    # Review and change the below later                                                              #
    ##################################################################################################
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # ANN201 Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method
]

"tests/unit/sdk/test_client.py" = [
    "W293", # Blank line contains whitespace (used within output check)
]

[tool.towncrier]

package = "infrahub-sdk"
directory = "changelog"
filename = "CHANGELOG.md"
start_string = "<!-- towncrier release notes start -->\n"
underlines = ["", "", ""]
title_format = "## [{version}](https://github.com/opsmill/infrahub/tree/v{version}) - {project_date}"
issue_format = "[#{issue}](https://github.com/opsmill/infrahub/issues/{issue})"
orphan_prefix = "+"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
