---
# yamllint disable rule:truthy rule:truthy rule:line-length
name: "CI"
on:
  pull_request:
  push:
    branches:
      - develop
      - stable

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  INFRAHUB_DB_USERNAME: neo4j
  INFRAHUB_DB_PASSWORD: admin
  INFRAHUB_DB_ADDRESS: localhost
  INFRAHUB_DB_PORT: 7687
  INFRAHUB_DB_PROTOCOL: bolt
  INFRAHUB_BROKER_ADDRESS: message-queue
  INFRAHUB_LOG_LEVEL: CRITICAL
  INFRAHUB_IMAGE_NAME: "opsmill/infrahub"
  INFRAHUB_IMAGE_VER: "local"
  PYTEST_XDIST_WORKER_COUNT: 4
  INFRAHUB_TEST_IN_DOCKER: 1
  VALE_VERSION: "3.0.7"
  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
   # ------------------------------------------ Check Files Changes  ------------------------------------------
  files-changed:
    name: Detect which file has changed
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      backend: ${{ steps.changes.outputs.backend_all }}
      documentation: ${{ steps.changes.outputs.documentation_all }}
      frontend: ${{ steps.changes.outputs.frontend_all }}
      sdk: ${{ steps.changes.outputs.sdk_all }}
      sync: ${{ steps.changes.outputs.sync_all }}
      e2e: ${{ steps.changes.outputs.e2e_all }}
      python: ${{ steps.changes.outputs.python_all }}
      javascript: ${{ steps.changes.outputs.javascript_all }}
      yaml: ${{ steps.changes.outputs.yaml_all }}
      infrahub_poetry_files: ${{ steps.changes.ouputs.infrahub_poetry_files }}
      python_sdk_poetry_files: ${{ steps.changes.ouputs.python_sdk_poetry_files }}
      sync_poetry_files: ${{ steps.changes.ouputs.sync_poetry_files }}
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

 # ------------------------------------------ All Linter  ------------------------------------------
  yaml-lint:
    if: needs.files-changed.outputs.yaml == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Identify which files have changed"
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - '**.yml'
              - '**.yaml'
              - 'development/workflows/ci.yml'
      - name: "Setup environment"
        run: "pip install yamllint==1.33.0"
      - name: "Linting: yamllint"
        run: "yamllint ."

  javascript-lint:
    if: needs.files-changed.outputs.javascript == 'true'
    needs: ["files-changed"]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run eslint

  python-lint:
    if: needs.files-changed.outputs.python == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup environment"
        run: "pip install ruff==0.3.3"
      - name: "Linting: ruff check"
        run: "ruff check --diff ."
      - name: "Linting: ruff format"
        run: "ruff format --check --diff ."

  markdown-lint:
    if: needs.files-changed.outputs.documentation == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Linting: markdownlint"
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          config: .markdownlint.yaml
          globs: '**/*.{md,mdx}'

  infrahub-poetry-check:
    if: |
      needs.files-changed.outputs.infrahub_poetry_files == 'true' ||
      github.ref_name == 'stable' ||
      github.ref_name == 'develop'
    needs:
      - "files-changed"
    uses: "./.github/workflows/poetry-check.yml"
    with:
      directory: "./"

  python-sdk-poetry-check:
    if: |
      needs.files-changed.outputs.python_sdk_poetry_files == 'true' ||
      github.ref_name == 'stable' ||
      github.ref_name == 'develop'
    needs:
      - "files-changed"
    uses: "./.github/workflows/poetry-check.yml"
    with:
      directory: "./python-sdk/"

  sync-poetry-check:
    if: |
      needs.files-changed.outputs.sync_poetry_files == 'true' ||
      github.ref_name == 'stable' ||
      github.ref_name == 'develop'
    needs:
      - "files-changed"
    uses: "./.github/workflows/poetry-check.yml"
    with:
      directory: "./sync/"

  python-sdk-unit-tests:
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        pydantic-version: ["1.10.14", "^2"]
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.sdk == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      INFRAHUB_DB_TYPE: memgraph
    defaults:
      run:
        working-directory: python_sdk/
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Setup environment"
        run: |
          pipx install poetry
          poetry config virtualenvs.prefer-active-python true
          pip install invoke toml
      - name: Set Version of Pydantic
        run: poetry add pydantic@${{ matrix.pydantic-version }}
      - name: "Install Package"
        run: "poetry install --all-extras"
      - name: "Pylint Tests"
        run: "poetry run pylint infrahub_sdk/"
      - name: "Mypy Tests"
        run: "poetry run mypy --show-error-codes infrahub_sdk/"
      - name: "Unit Tests"
        run: "poetry --directory python_sdk run coverage run --source=infrahub_sdk -m pytest python_sdk/tests/unit/"
        working-directory: ./
      - name: "Create coverage file"
        run: "poetry --directory python_sdk run coverage xml"
        working-directory: ./
      - name: "Coveralls : Unit Tests"
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: python-sdk-unit
          parallel: true


  python-sdk-integration-tests:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    needs: ["python-sdk-unit-tests"]
    runs-on:
      group: huge-runners
    timeout-minutes: 30
    env:
      INFRAHUB_DB_TYPE: memgraph
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Install Invoke"
        run: "pip install toml invoke"

      - name: "Set environment variables"
        run: echo INFRAHUB_BUILD_NAME=infrahub-${{ runner.name }} >> $GITHUB_ENV
      - name: "Set environment variables"
        run: echo INFRAHUB_IMAGE_VER=local-${{ runner.name }}-${{ github.sha }} >> $GITHUB_ENV
      - name: "Clear docker environment"
        run: docker compose -p $INFRAHUB_BUILD_NAME down -v --remove-orphans --rmi local

      - name: "Build Test Image"
        run: "invoke dev.build"
      - name: "Pull External Docker Images"
        run: "invoke dev.pull"
      - name: "Integration Tests"
        run: "invoke sdk.test-integration"
      - name: "Coveralls : Integration Tests"
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: python-sdk-integration
          parallel: true

  infrahub-sync-unit-tests:
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.sync == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: sync/
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Setup environment"
        run: |
          pipx install poetry
          poetry config virtualenvs.prefer-active-python true
          pip install invoke toml
      - name: "Install Package"
        run: "poetry install"
      - name: "Pylint Tests"
        run: "poetry run pylint infrahub_sync/"
      # - name: "Mypy Tests"
      #   run: "poetry run mypy --show-error-codes infrahub_sync/"


  backend-tests-unit:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.backend == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on:
      group: huge-runners
    timeout-minutes: 45
    env:
      INFRAHUB_DB_TYPE: memgraph
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup Python environment"
        run: "pip install toml invoke"
      - name: "Set environment variables"
        run: echo INFRAHUB_BUILD_NAME=infrahub-${{ runner.name }} >> $GITHUB_ENV
      - name: "Set environment variables"
        run: echo INFRAHUB_IMAGE_VER=local-${{ runner.name }}-${{ github.sha }} >> $GITHUB_ENV
      - name: "Clear docker environment"
        run: docker compose -p $INFRAHUB_BUILD_NAME down -v --remove-orphans --rmi local
      - name: "Build Test Image"
        run: "invoke dev.build"
      - name: "Pull External Docker Images"
        run: "invoke dev.pull"
      - name: "Unit Tests"
        run: "invoke backend.test-unit"
      - name: "Coveralls : Unit Tests"
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: backend-unit
          parallel: true
      - name: Generate tracing spans
        if: always()
        uses: inception-health/otel-upload-test-artifact-action@v1
        with:
          jobName: "backend-tests-unit"
          stepName: "Unit Tests"
          path: "pytest-junit.xml"
          type: "junit"
          githubToken: ${{ secrets.GH_TRACING_REPO_TOKEN }}

  backend-tests-integration:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.backend == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on:
      group: "huge-runners"
    timeout-minutes: 30
    env:
      INFRAHUB_DB_TYPE: memgraph
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup Python environment"
        run: "pip install toml invoke"
      - name: "Set environment variables"
        run: echo INFRAHUB_BUILD_NAME=infrahub-${{ runner.name }} >> $GITHUB_ENV
      - name: "Set environment variables"
        run: echo INFRAHUB_IMAGE_VER=local-${{ runner.name }}-${{ github.sha }} >> $GITHUB_ENV
      - name: "Clear docker environment"
        run: docker compose -p $INFRAHUB_BUILD_NAME down -v --remove-orphans --rmi local
      - name: "Build Test Image"
        run: "invoke dev.build"
      - name: "Pull External Docker Images"
        run: "invoke dev.pull"
      - name: "Pylint Tests"
        run: "invoke backend.pylint --docker"
      - name: "Mypy Tests"
        run: "invoke backend.mypy --docker"
      - name: "Integration Tests"
        run: "invoke backend.test-integration"
      - name: "Coveralls : Integration Tests"
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: backend-integration
          parallel: true

  backend-tests-neo4j:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.backend == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on:
      group: huge-runners
    timeout-minutes: 45
    env:
      INFRAHUB_DB_TYPE: neo4j
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: "Setup Python environment"
        run: "pip install toml invoke"
      - name: "Set environment variables"
        run: echo INFRAHUB_BUILD_NAME=infrahub-${{ runner.name }} >> $GITHUB_ENV
      - name: "Set environment variables"
        run: echo INFRAHUB_IMAGE_VER=local-${{ runner.name }}-${{ github.sha }} >> $GITHUB_ENV
      - name: "Clear docker environment"
        run: docker compose -p $INFRAHUB_BUILD_NAME down -v --remove-orphans --rmi local
      - name: "Build Test Image"
        run: "invoke dev.build"
      - name: "Pull External Docker Images"
        run: "invoke dev.pull"
      - name: "Unit Tests"
        run: "invoke backend.test-unit"

  backend-validate-generated:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.backend == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: "Setup environment"
        run: |
          pipx install poetry
          poetry config virtualenvs.prefer-active-python true
          pip install invoke toml
      - name: "Install Package"
        run: "poetry install"
      - name: "Run validator"
        run: "poetry run invoke backend.validate-generated"

  frontend-tests:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.frontend == 'true'
    needs: ["files-changed", "yaml-lint", "javascript-lint"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 30
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: "Install frontend"
        working-directory: ./frontend
        run: npm install
      - name: "Run unit tests"
        working-directory: ./frontend
        run: "npm run test:coverage"
      - name: "Run integration tests"
        working-directory: ./frontend
        run: "npm run cypress:run"
      - name: Upload cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: docs/media/*
      - name: Upload cypress videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: frontend/cypress/videos/*
      - name: "Coveralls : Unit Tests"
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: frontend-unit
          parallel: true
          file: frontend/coverage/lcov.info

  documentation:
    defaults:
      run:
        working-directory: ./docs
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.documentation == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: "Install dependencies"
        run: npm install
      - name: "Setup Python environment"
        run: "pip install toml invoke"
      - name: "Build website"
        run: "invoke docs.build"

  validate_generated_documentation:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.python == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: "Setup environment"
        run: "pip install invoke toml"
      - name: "Build Test Image"
        run: "invoke dev.build"
      - name: "Validate generated documentation"
        run: "invoke docs.validate --docker"

  validate_documentation_style:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.documentation == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "ubuntu-22.04"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v4"
      # The official GitHub Action for Vale doesn't work, installing manually instead:
      # https://github.com/errata-ai/vale-action/issues/103
      - name: Download Vale
        run: |
          curl -sL "https://github.com/errata-ai/vale/releases/download/v${VALE_VERSION}/vale_${VALE_VERSION}_Linux_64-bit.tar.gz" -o vale.tar.gz
          tar -xzf vale.tar.gz
        env:
          VALE_VERSION: ${{ env.VALE_VERSION }}
      - name: "Validate documentation style"
        run: "./vale ."
  # ------------------------------------------ E2E Tests  ------------------------------------------
  E2E-testing-playwright:
    defaults:
      run:
        working-directory: ./frontend
    needs:
      - javascript-lint
      - files-changed
      - yaml-lint
      - python-lint
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on:
      group: huge-runners
    timeout-minutes: 40
    env:
      INFRAHUB_DB_TYPE: neo4j
      METRICS_ENDPOINT: ${{ secrets.METRICS_ENDPOINT }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install Invoke
        run: pip install toml invoke

      - name: Select infrahub port
        run: echo "INFRAHUB_SERVER_PORT=$(shuf -n 1 -i 10000-30000)" >> $GITHUB_ENV
      - name: Select infrahub db port
        run: echo "INFRAHUB_DB_BACKUP_PORT=$(shuf -n 1 -i 10000-30000)" >> $GITHUB_ENV
      - name: Select vmagent port
        run: echo "VMAGENT_PORT=$(shuf -n 1 -i 10000-30000)" >> $GITHUB_ENV
      - name: Set job name
        run: echo JOB_NAME="$GITHUB_JOB" >> $GITHUB_ENV

      - name: Enable tracing
        run: echo "INFRAHUB_TRACE_ENABLE=true" >> $GITHUB_ENV
      - name: Set tracing configuration
        run: echo "INFRAHUB_TRACE_INSECURE=false" >> $GITHUB_ENV
      - name: Set tracing configuration
        run: echo "INFRAHUB_TRACE_EXPORTER_ENDPOINT=${{ secrets.TRACING_ENDPOINT }}" >> $GITHUB_ENV
      - name: Set tracing configuration
        run: echo "OTEL_RESOURCE_ATTRIBUTES=github.run_id=${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: "Store start time"
        run: echo TEST_START_TIME=$(date +%s)000 >> $GITHUB_ENV

      - name: "Set environment variables"
        run: echo INFRAHUB_BUILD_NAME=infrahub-${{ runner.name }} >> $GITHUB_ENV
      - name: "Set environment variables"
        run: echo INFRAHUB_IMAGE_VER=local-${{ runner.name }}-${{ github.sha }} >> $GITHUB_ENV
      - name: "Clear docker environment"
        run: docker compose -p $INFRAHUB_BUILD_NAME down -v --remove-orphans --rmi local

      - name: Build Demo
        run: invoke dev.build

      - name: Pull External Docker Images
        run: invoke dev.pull

      - name: Initialize Demo
        id: init-demo
        run: invoke dev.start dev.load-infra-schema

      - name: Check Demo Status
        run: invoke dev.status

      - name: Load Data
        run: invoke dev.load-infra-data

      - name: Set infrahub address
        run: echo "INFRAHUB_ADDRESS=http://localhost:${INFRAHUB_SERVER_PORT}" >> $GITHUB_ENV

      - name: Git Repository
        run: invoke dev.infra-git-import dev.infra-git-create

      - name: Install frontend dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Run Playwright tests
        run: npm run ci:test:e2e

      - name: Generate tracing spans
        if: always()
        uses: inception-health/otel-upload-test-artifact-action@v1
        with:
          jobName: "E2E-testing-playwright"
          stepName: "Run Playwright tests"
          path: "frontend/playwright-junit.xml"
          type: "junit"
          githubToken: ${{ secrets.GH_TRACING_REPO_TOKEN }}

      - name: playwright-report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/

      - name: Containers after tests
        if: always()
        run: docker ps -a

      - name: Display server logs
        if: always()
        run: docker logs "${INFRAHUB_BUILD_NAME}-infrahub-server-1"

      - name: Display git 1 logs
        if: always()
        run: docker logs "${INFRAHUB_BUILD_NAME}-infrahub-git-1"

      - name: Display git 2 logs
        if: always()
        run: docker logs "${INFRAHUB_BUILD_NAME}-infrahub-git-2"

      - name: Display database logs
        if: always()
        run: docker logs "${INFRAHUB_BUILD_NAME}-database-1"

      - name: Display server status
        if: always()
        run: invoke demo.status

      - name: "Clear docker environment and force vmagent to stop"
        if: always()
        run: docker compose -p $INFRAHUB_BUILD_NAME down -v --remove-orphans --rmi local

      - name: "Wait for vmagent to push metrics"
        if: always()
        run: "sleep 10"
      - name: "Show graph URL"
        if: always()
        run: 'echo "https://grafana-prod.tailc018d.ts.net/d/a4461039-bb27-4f57-9b2a-2c7f4e0a3459/e2e-tests?orgId=1&var-pr=$GITHUB_PR_NUMBER&var-job=$JOB_NAME&var-runner=$INFRAHUB_BUILD_NAME&from=$TEST_START_TIME&to=$(date +%s)000"'

  # ------------------------------------------ Benchmarks ------------------------------------------------
  backend-benchmark:
    needs:
      - javascript-lint
      - files-changed
      - yaml-lint
      - python-lint
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.backend == 'true'
    runs-on:
      group: huge-runners
    env:
      INFRAHUB_DB_TYPE: memgraph
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: "Setup environment"
        run: |
          pipx install poetry
          poetry config virtualenvs.prefer-active-python true
          pip install invoke toml
      - name: Set Version of Pydantic
        run: poetry add pydantic@^2
      - name: "Install Package"
        run: "poetry install"

      - name: Select infrahub db port
        run: echo "INFRAHUB_DB_PORT=$(shuf -n 1 -i 10000-30000)" >> $GITHUB_ENV

      - name: "Set environment variables"
        run: echo INFRAHUB_BUILD_NAME=infrahub-${{ runner.name }} >> $GITHUB_ENV
      - name: "Set environment variables"
        run: echo INFRAHUB_IMAGE_VER=local-${{ runner.name }}-${{ github.sha }} >> $GITHUB_ENV
      - name: "Clear docker environment"
        run: docker compose -p $INFRAHUB_BUILD_NAME down -v --remove-orphans --rmi local

      - name: Create docker compose override
        run: mv development/docker-compose.dev-override-benchmark.yml development/docker-compose.dev-override.yml

      - name: Start dependencies
        run: invoke dev.deps

      - name: Update PATH
        run: "echo ~/.cargo/bin >> $GITHUB_PATH"
      - name: Run benchmarks
        uses: CodSpeedHQ/action@v2
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: "poetry run pytest -v backend/tests/benchmark/ --codspeed"
        env:
          INFRAHUB_TEST_IN_DOCKER: "false"
  # ------------------------------------------ Coverall Report  ------------------------------------------
  coverall-report:
    needs:
      - backend-tests-integration
      - backend-tests-unit
      - frontend-tests
      - python-sdk-integration-tests
    if: |
      always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # # NOTE: The ref value should be different when triggered by pull_request event.
      # #       See: https://github.com/lewagon/wait-on-check-action/issues/25.
      # - name: Wait on tests (PR)
      #   uses: lewagon/wait-on-check-action@e106e5c43e8ca1edea6383a39a01c5ca495fd812
      #   if: github.event_name == 'pull_request'
      #   with:
      #     ref: ${{ github.event.pull_request.head.sha }}
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     wait-interval: 10
      #     running-workflow-name: report
      #     allowed-conclusions: success,skipped,cancelled,failure

      # - name: Wait on tests (push)
      #   if: github.event_name != 'pull_request'
      #   uses: lewagon/wait-on-check-action@e106e5c43e8ca1edea6383a39a01c5ca495fd812
      #   with:
      #     ref: ${{ github.sha }}
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     wait-interval: 10
      #     running-workflow-name: report
      #     allowed-conclusions: success,skipped,cancelled,failure

      - uses: coverallsapp/github-action@v2
        continue-on-error: true
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          carryforward: "backend-unit,backend-integration,frontend-unit,python-sdk-unit,python-sdk-integration"
          parallel-finished: true
