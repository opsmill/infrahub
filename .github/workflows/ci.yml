---
# yamllint disable rule:truthy rule:truthy rule:line-length
name: "CI"
on:
  pull_request:
  push:
    branches:
      - develop
      - stable

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NEO4J_USERNAME: neo4j
  NEO4J_PASSWORD: admin
  NEO4J_ADDRESS: localhost
  NEO4J_PORT: 7687
  NEO4J_PROTOCOL: bolt
  INFRAHUB_LOG_LEVEL: CRITICAL
  INFRAHUB_IMAGE_NAME: "opsmill/infrahub"
  INFRAHUB_IMAGE_VER: "testing"
  PYTEST_XDIST_WORKER_COUNT: 2
  INFRAHUB_TEST_IN_DOCKER: 1

jobs:
  files-changed:
    name: Detect which file has changed
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      backend: ${{ steps.changes.outputs.backend_all }}
      frontend: ${{ steps.changes.outputs.frontend_all }}
      sdk: ${{ steps.changes.outputs.sdk_all }}
      ctl: ${{ steps.changes.outputs.ctl_all }}
      e2e: ${{ steps.changes.outputs.e2e_all }}
      python: ${{ steps.changes.outputs.python_all }}
      javascript: ${{ steps.changes.outputs.javascript_all }}
      yaml: ${{ steps.changes.outputs.yaml_all }}
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

  yaml-lint:
    if: needs.files-changed.outputs.yaml == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: "Identify which files have changed"
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '**.yml'
              - '**.yaml'
              - 'development/workflows/ci.yml'
      - name: "Setup environment"
        run: "pip install yamllint==1.29.0"
      - name: "Linting: yamllint"
        run: "yamllint ."
  javascript-lint:
    if: needs.files-changed.outputs.javascript == 'true'
    needs: ["files-changed"]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run eslint
  python-lint:
    if: needs.files-changed.outputs.python == 'true'
    needs: ["files-changed"]
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: "Setup environment"
        run: "pip install black==23.1.0 ruff==0.0.265"
      - name: "Linting: BLACK"
        run: "black --check ."
      - name: "Linting: ruff"
        run: "ruff check ."

  # backend-build-docker:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Build Backend Image
  #       uses: docker/build-push-action@v4
  #       with:
  #         file: "development/Dockerfile-backend"
  #         push: false
  #         tags: "${{env.INFRAHUB_IMAGE_NAME}}:${{env.INFRAHUB_IMAGE_VER}}"
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  python-sdk-tests:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.sdk == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "ubuntu-20.04"
    timeout-minutes: 30
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: "Install Invoke"
        run: "pip install toml invoke"
      - name: "Build Test Image"
        run: "invoke test.build"
      - name: "Pull External Docker Images"
        run: "invoke test.pull"
      - name: "Black Tests"
        run: "invoke sdk.black --docker"
      - name: "Isort Tests"
        run: "invoke sdk.isort --docker"
      - name: "Pylint Tests"
        run: "invoke sdk.pylint --docker"
      - name: "Mypy Tests"
        run: "invoke sdk.mypy --docker"
      - name: "Unit Tests"
        run: "invoke sdk.test-unit"
      - name: "Coveralls : Unit Tests"
        uses: coverallsapp/github-action@v2.0.0
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: python-sdk-unit
          parallel: true

      - name: "Integration Tests"
        run: "invoke sdk.test-integration"
      - name: "Coveralls : Integration Tests"
        uses: coverallsapp/github-action@v2.0.0
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: python-sdk-integration
          parallel: true

  backend-tests-default:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.backend == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "runner-ubuntu-4-16"
    timeout-minutes: 45
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: "Setup Python environment"
        run: "pip install toml invoke"
      - name: "Build Test Image"
        run: "invoke test.build"
      - name: "Pull External Docker Images"
        run: "invoke test.pull"
      - name: "Black Tests"
        run: "invoke backend.black --docker"
      - name: "Isort Tests"
        run: "invoke backend.isort --docker"
      - name: "Pylint Tests"
        run: "invoke backend.pylint --docker"
      - name: "Unit Tests"
        run: "invoke backend.test-unit"
      - name: "Coveralls : Unit Tests"
        uses: coverallsapp/github-action@v2.0.0
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: backend-unit
          parallel: true
      - name: "Integration Tests"
        run: "invoke backend.test-integration"
      - name: "Coveralls : Integration Tests"
        uses: coverallsapp/github-action@v2.0.0
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: backend-integration
          parallel: true

  backend-tests-neo4j:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.backend == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "runner-ubuntu-4-16"
    timeout-minutes: 30
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: "Setup Python environment"
        run: "pip install toml invoke"
      # - name: Cache Docker images.
      #   uses: ScribeMD/docker-cache@0.3.3
      #   with:
      #     key: "docker-${{ runner.os }}-backend-neo4j-${{ hashFiles('development/**') }}"
      - name: "Build Test Image"
        run: "invoke test.build"
      - name: "Pull External Docker Images"
        run: "invoke test.pull --database=neo4j"
      - name: "Unit Tests"
        run: "invoke backend.test-core --database=neo4j"

  ctl-tests:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.ctl == 'true'
    needs: ["files-changed", "yaml-lint", "python-lint"]
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: "Install Invoke"
        run: "pip install toml invoke"
      - name: "Build Test Image"
        run: "invoke test.build"
      - name: "Black Tests"
        run: "invoke ctl.black --docker"
      - name: "Isort Tests"
        run: "invoke ctl.isort --docker"
      - name: "Pylint Tests"
        run: "invoke ctl.pylint --docker"
      - name: "Mypy Tests"
        run: "invoke ctl.mypy --docker"
      - name: "Unit Tests"
        run: "invoke ctl.test-unit"
      - name: "Coveralls : Unit Tests"
        uses: coverallsapp/github-action@v2.0.0
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: infrahubctl-unit
          parallel: true

  frontend-tests:
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      needs.files-changed.outputs.frontend == 'true'
    needs: ["files-changed", "yaml-lint", "javascript-lint"]
    runs-on: "ubuntu-20.04"
    timeout-minutes: 30
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: "Install frontend"
        working-directory: ./frontend
        run: npm install
      - name: "Run unit tests"
        working-directory: ./frontend
        run: "npm run test:coverage"
      - name: "Run integration tests"
        working-directory: ./frontend
        run: "npm run cypress:run"
      - name: "Coveralls : Unit Tests"
        uses: coverallsapp/github-action@v2.0.0
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          flag-name: frontend-unit
          parallel: true
          file: frontend/coverage/lcov.info

  E2E-testing:
    needs: ["frontend-tests", "ctl-tests", "backend-tests-default", "python-sdk-tests"]
    if: |
      always() && !cancelled() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on: "runner-ubuntu-8-32"
    timeout-minutes: 30
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v3"
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
      - name: "Install Invoke"
        run: "pip install toml invoke"
      - name: Build Demo
        run: "invoke demo.build"
      - name: "Pull External Docker Images"
        run: "invoke demo.pull"
      - name: Initialize Demo
        id: init-demo
        run: "invoke demo.init demo.start demo.load-infra-schema"
      - name: Check Demo Status
        run: "invoke demo.status"
      - name: Check Docker stats
        run: "docker stats --no-stream"
      - name: Load Data
        run: "invoke demo.load-infra-data"
      - name: Run End to End Tests
        working-directory: ./frontend
        run: npm run cypress:run:e2e
      - name: Upload cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: docs/media/*
      - name: Display server logs
        if: failure()
        run: docker logs infrahub-infrahub-server-1
      - name: Display git 1 logs
        if: failure()
        run: docker logs infrahub-infrahub-git-1
      - name: Display git 2 logs
        if: failure()
        run: docker logs infrahub-infrahub-git-2
      - name: Display database logs
        if: failure()
        run: docker logs infrahub-database-1
      - name: Display server status
        if: failure()
        run: invoke demo.status


  coverall-report:
    needs: ["frontend-tests", "ctl-tests", "backend-tests-default", "python-sdk-tests"]
    if: |
      always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # # NOTE: The ref value should be different when triggered by pull_request event.
      # #       See: https://github.com/lewagon/wait-on-check-action/issues/25.
      # - name: Wait on tests (PR)
      #   uses: lewagon/wait-on-check-action@e106e5c43e8ca1edea6383a39a01c5ca495fd812
      #   if: github.event_name == 'pull_request'
      #   with:
      #     ref: ${{ github.event.pull_request.head.sha }}
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     wait-interval: 10
      #     running-workflow-name: report
      #     allowed-conclusions: success,skipped,cancelled,failure

      # - name: Wait on tests (push)
      #   if: github.event_name != 'pull_request'
      #   uses: lewagon/wait-on-check-action@e106e5c43e8ca1edea6383a39a01c5ca495fd812
      #   with:
      #     ref: ${{ github.sha }}
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     wait-interval: 10
      #     running-workflow-name: report
      #     allowed-conclusions: success,skipped,cancelled,failure

      - uses: coverallsapp/github-action@v2
        env:
          COVERALLS_SERVICE_NUMBER: ${{ github.sha }}
        with:
          carryforward: "backend-unit,backend-integration,frontend-unit,infrahubctl-unit,python-sdk-unit,python-sdk-integration"
          parallel-finished: true
