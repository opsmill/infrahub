# Generated by "invoke backend.generate", do not edit directly

from __future__ import annotations

from typing import TYPE_CHECKING, Optional, Protocol, Union, runtime_checkable

from .protocols_base import CoreNode, CoreNodeSync

if TYPE_CHECKING:
    from datetime import datetime
    from infrahub_sdk.node import RelatedNodeSync, RelationshipManagerSync, RelatedNode, RelationshipManager
    from .protocols_base import String, StringOptional, Integer, IntegerOptional, Boolean, BooleanOptional, URL, URLOptional, Dropdown, DropdownOptional, Enum, EnumOptional, DateTime, DateTimeOptional, IPHost, IPHostOptional, IPNetwork, IPNetworkOptional, HashedPassword, HashedPasswordOptional, JSONAttribute, JSONAttributeOptional, ListAttribute, ListAttributeOptional

# pylint: disable=too-many-ancestors

# ---------------------------------------------
# ASYNC
# ---------------------------------------------
{% for generic in generics %}
class {{ generic.namespace }}{{ generic.name }}(CoreNode):
    {%- if not generic.attributes|default([]) and not generic.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in generic.attributes|default([]) %}
    {{ attribute | render_attribute(use_python_primitive=False) }}
    {%- endfor %}
    {%- for relationship in generic.relationships|default([]) %}
    {%- if relationship.cardinality == "many" %}
    {{ relationship.name }}: RelationshipManager
    {%- else %}
    {{ relationship.name }}: RelatedNode
    {%- endif %}
    {%- endfor %}
    {%- if generic.hierarchical | default(false) %}
    parent: RelatedNode
    children: RelationshipManager
    {%- endif %}
{% endfor %}

{% for model in models %}
class {{ model.namespace }}{{ model.name }}({{ model | inheritance }}):
    {%- if not model.attributes|default([]) and not model.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in model.attributes|default([]) %}
    {{ attribute | render_attribute(use_python_primitive=False) }}
    {%- endfor %}
    {%- for relationship in model.relationships|default([]) %}
    {%- if relationship.cardinality == "many" %}
    {{ relationship.name }}: RelationshipManager
    {%- else %}
    {{ relationship.name }}: RelatedNode
    {%- endif %}
    {%- endfor %}
    {%- if model.hierarchical | default(false) %}
    parent: RelatedNode
    children: RelationshipManager
    {%- endif %}
{% endfor %}

# ---------------------------------------------
# SYNC 
# ---------------------------------------------
{% for generic in generics %}
class {{ generic.namespace }}{{ generic.name }}Sync(CoreNodeSync):
    {%- if not generic.attributes|default([]) and not generic.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in generic.attributes|default([]) %}
    {{ attribute | render_attribute(use_python_primitive=False) }}
    {%- endfor %}
    {%- for relationship in generic.relationships|default([]) %}
    {%- if relationship.cardinality == "many" %}
    {{ relationship.name }}: RelationshipManagerSync
    {%- else %}
    {{ relationship.name }}: RelatedNodeSync
    {%- endif %}
    {%- endfor %}
    {%- if generic.hierarchical | default(false) %}
    parent: RelatedNodeSync
    children: RelationshipManagerSync
    {%- endif %}
{% endfor %}

{% for model in models %}
class {{ model.namespace }}{{ model.name }}Sync({{ model | inheritance(sync=True) }}):
    {%- if not model.attributes|default([]) and not model.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in model.attributes|default([]) %}
    {{ attribute | render_attribute(use_python_primitive=False) }}
    {%- endfor %}
    {%- for relationship in model.relationships|default([]) %}
    {%- if relationship.cardinality == "many" %}
    {{ relationship.name }}: RelationshipManagerSync
    {%- else %}
    {{ relationship.name }}: RelatedNodeSync
    {%- endif %}
    {%- endfor %}
    {%- if model.hierarchical | default(false) %}
    parent: RelatedNodeSync
    children: RelationshipManagerSync
    {%- endif %}
{% endfor %}