# Generated by "invoke backend.generate", do not edit directly

from __future__ import annotations

from typing import TYPE_CHECKING, Optional, Protocol, Union, runtime_checkable

if TYPE_CHECKING:
    from datetime import datetime
    from infrahub_sdk.node import RelatedNodeSync, RelationshipManagerSync, RelatedNode, RelationshipManager


@runtime_checkable
class CoreNode(Protocol):
    id: str
    display_label: Optional[str]
    hfid: Optional[list[str]]
    hfid_str: Optional[str]

    def get_kind(self) -> str: ...

{% for generic in generics %}
class {{ generic.namespace }}{{ generic.name }}(CoreNode):
    {%- if not generic.attributes|default([]) and not generic.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in generic.attributes|default([]) %}
    {{ attribute | render_attribute(use_python_primitive=True) }}
    {%- endfor %}
    {%- for relationship in generic.relationships|default([]) %}
    {%- if relationship.cardinality == "many" %}
    {{ relationship.name }}: Union[RelationshipManager, RelationshipManagerSync]
    {%- else %}
    {{ relationship.name }}: Union[RelatedNode, RelatedNodeSync]
    {%- endif %}
    {%- endfor %}
    {%- if generic.hierarchical | default(false) %}
    parent: Union[RelatedNode, RelatedNodeSync]
    children: Union[RelationshipManager, RelationshipManagerSync]
    {%- endif %}
{% endfor %}

{% for model in models %}
class {{ model.namespace }}{{ model.name }}({{ model | inheritance }}):
    {%- if not model.attributes|default([]) and not model.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in model.attributes|default([]) %}
    {{ attribute | render_attribute(use_python_primitive=True) }}
    {%- endfor %}
    {%- for relationship in model.relationships|default([]) %}
    {%- if relationship.cardinality == "many" %}
    {{ relationship.name }}: Union[RelationshipManager, RelationshipManagerSync]
    {%- else %}
    {{ relationship.name }}: Union[RelatedNode, RelatedNodeSync]
    {%- endif %}
    {%- endfor %}
    {%- if model.hierarchical | default(false) %}
    parent: Union[RelatedNode, RelatedNodeSync]
    children: Union[RelationshipManager, RelationshipManagerSync]
    {%- endif %}
{% endfor %}