# Generated by "invoke backend.generate", do not edit directly

from __future__ import annotations

from typing import TYPE_CHECKING, Protocol, runtime_checkable, Optional, Any
from typing_extensions import Self

if TYPE_CHECKING:
    from enum import Enum
    from infrahub.core.attribute import Boolean, DateTime, Dropdown, HashedPassword, Integer, IPHost, IPNetwork, JSONAttribute, ListAttribute, String, URL, BooleanOptional, DateTimeOptional, DropdownOptional, HashedPasswordOptional, IntegerOptional, IPHostOptional, IPNetworkOptional, JSONAttributeOptional, ListAttributeOptional, StringOptional, URLOptional
    from infrahub.core.relationship import RelationshipManager
    from neo4j import (
        AsyncResult,
        AsyncSession,
        AsyncTransaction,
        Record
    )

@runtime_checkable
class SchemaBranch(Protocol):
    ...

@runtime_checkable
class Timestamp(Protocol):
    ...


@runtime_checkable
class InfrahubDatabase(Protocol):
    is_session: bool
    is_transaction: bool

    def add_schema(self, schema: SchemaBranch, name: Optional[str] = None) -> None: ...
    def start_session(self, read_only: bool = False, schemas: Optional[list[SchemaBranch]] = None) -> Self:  ...
    def start_transaction(self, schemas: Optional[list[SchemaBranch]] = None) -> Self:  ...
    async def session(self) -> AsyncSession: ...
    async def transaction(self, name: Optional[str]) -> AsyncTransaction: ...
    async def close(self) -> None: ...

    async def execute_query(
        self, query: str, params: Optional[dict[str, Any]] = None, name: Optional[str] = "undefined"
    ) -> list[Record]: ...

    async def execute_query_with_metadata(
        self, query: str, params: Optional[dict[str, Any]] = None, name: Optional[str] = "undefined"
    ) -> tuple[list[Record], dict[str, Any]]: ...

    async def run_query(
        self, query: str, params: Optional[dict[str, Any]] = None, name: Optional[str] = "undefined"
    ) -> AsyncResult: ...

    def render_list_comprehension(self, items: str, item_name: str) -> str: ...
    def render_list_comprehension_with_list(self, items: str, item_names: list[str]) -> str: ...
    def render_uuid_generation(self, node_label: str, node_attr: str) -> str: ...

@runtime_checkable
class CoreNode(Protocol):
    id: str

    def get_id(self) -> str: ...
    def get_kind(self) -> str: ...
    async def save(self, db: InfrahubDatabase, at: Optional[Timestamp] = None ) -> Self: ...

{% for generic in generics %}
class {{ generic.namespace }}{{ generic.name }}(CoreNode):
    {%- if not generic.attributes|default([]) and not generic.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in generic.attributes|default([]) %}
    {{ attribute | render_attribute }}
    {%- endfor %}
    {%- for relationship in generic.relationships|default([]) %}
    {{ relationship.name }}: RelationshipManager
    {%- endfor %}
    {%- if generic.hierarchical | default(false) %}
    parent: RelationshipManager
    children: RelationshipManager
    {%- endif %}
{% endfor %}

{% for model in models %}
class {{ model.namespace }}{{ model.name }}({{ model | inheritance }}):
    {%- if not model.attributes|default([]) and not model.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in model.attributes|default([]) %}
    {{ attribute | render_attribute }}
    {%- endfor %}
    {%- for relationship in model.relationships|default([]) %}
    {{ relationship.name }}: RelationshipManager
    {%- endfor %}
    {%- if model.hierarchical | default(false) %}
    parent:  RelationshipManager
    children: RelationshipManager
    {%- endif %}
{% endfor %}