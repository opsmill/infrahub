# Generated by "invoke backend.generate", do not edit directly

from __future__ import annotations

from typing import TYPE_CHECKING, Protocol, runtime_checkable

if TYPE_CHECKING:
    from enum import Enum
    from infrahub.core.attribute import Boolean, DateTime, Dropdown, HashedPassword, Integer, IPHost, IPNetwork, JSONAttribute, ListAttribute, String, URL
    from infrahub.core.relationship import RelationshipManager


@runtime_checkable
class CoreNode(Protocol):
    id: str

    def get_id(self) -> str: ...
    def get_kind(self) -> str: ...
    async def save(self) -> None: ...

{% for generic in generics %}
class {{ generic.namespace }}{{ generic.name }}(CoreNode):
    {%- if not generic.attributes|default([]) and not generic.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in generic.attributes|default([]) %}
    {{ attribute | render_attribute }}
    {%- endfor %}
    {%- for relationship in generic.relationships|default([]) %}
    {{ relationship.name }}: RelationshipManager
    {%- endfor %}
    {%- if generic.hierarchical | default(false) %}
    parent: RelationshipManager
    children: RelationshipManager
    {%- endif %}
{% endfor %}

{% for model in models %}
class {{ model.namespace }}{{ model.name }}({{ model | inheritance }}):
    {%- if not model.attributes|default([]) and not model.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in model.attributes|default([]) %}
    {{ attribute | render_attribute }}
    {%- endfor %}
    {%- for relationship in model.relationships|default([]) %}
    {{ relationship.name }}: RelationshipManager
    {%- endfor %}
    {%- if model.hierarchical | default(false) %}
    parent:  RelationshipManager
    children: RelationshipManager
    {%- endif %}
{% endfor %}