# Generated by "invoke backend.generate", do not edit directly

from __future__ import annotations

from typing import TYPE_CHECKING, Protocol, runtime_checkable, Optional, Any

from .protocols_base import CoreNode

if TYPE_CHECKING:
    from enum import Enum
    from infrahub.core.attribute import Boolean, DateTime, Dropdown, HashedPassword, Integer, IPHost, IPNetwork, JSONAttribute, ListAttribute, String, URL, BooleanOptional, DateTimeOptional, DropdownOptional, HashedPasswordOptional, IntegerOptional, IPHostOptional, IPNetworkOptional, JSONAttributeOptional, ListAttributeOptional, StringOptional, URLOptional
    from infrahub.core.relationship import RelationshipManager


{% for generic in generics %}
class {{ generic.namespace }}{{ generic.name }}(CoreNode):
    {%- if not generic.attributes|default([]) and not generic.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in generic.attributes|default([]) %}
    {{ attribute | render_attribute }}
    {%- endfor %}
    {%- for relationship in generic.relationships|default([]) %}
    {{ relationship.name }}: RelationshipManager
    {%- endfor %}
    {%- if generic.hierarchical | default(false) %}
    parent: RelationshipManager
    children: RelationshipManager
    {%- endif %}
{% endfor %}

{% for model in models %}
class {{ model.namespace }}{{ model.name }}({{ model | inheritance }}):
    {%- if not model.attributes|default([]) and not model.relationships|default([]) %}
    pass
    {%- endif %}
    {%- for attribute in model.attributes|default([]) %}
    {{ attribute | render_attribute }}
    {%- endfor %}
    {%- for relationship in model.relationships|default([]) %}
    {{ relationship.name }}: RelationshipManager
    {%- endfor %}
    {%- if model.hierarchical | default(false) %}
    parent:  RelationshipManager
    children: RelationshipManager
    {%- endif %}
{% endfor %}