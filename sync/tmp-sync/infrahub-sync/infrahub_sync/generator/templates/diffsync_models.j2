from typing import Any, List, Optional
import netutils.regex
import netutils.ip

from infrahub_sync.adapters.{{ adapter.name }} import {{ adapter.name.title() }}Model

# -------------------------------------------------------
# AUTO-GENERATED FILE, DO NOT MODIFY
#  This file has been generated with the command `infrahub-sync generate`
#  All modifications will be lost the next time you reexecute this command
# -------------------------------------------------------
{%- for nodekind, node in schema.items() -%}
{%-  if node | get_identifiers(config) and config | has_node(node.kind) %}
class {{ nodekind }}({{ adapter.name.title() }}Model):
    _modelname = "{{ node.kind }}"
    _identifiers = {{ node | get_identifiers(config) | list_to_set }}
    _attributes = {{ node | get_attributes(config) | list_to_set }}

{%-      for attr in node.attributes -%}
{%-          if config | has_field(node.kind, attr.name) %}
    {{ attr.name }}: {{ attr | get_kind }}
{%-          endif -%}
{%-      endfor -%}
{%-      for rel in node.relationships -%}
{%-          if config | has_field(node.kind, rel.name) %}
    {{ rel.name }}: {{ rel | get_kind }}
{%-          endif -%}
{%-      endfor %}

    local_id: Optional[str] = None
    local_data: Optional[Any] = None

{%-      set filters = config.schema_mapping | get_filters(nodekind) %}
{%-      if filters %}
    @classmethod
    def filter_records(cls, records: List[Any]) -> List[Any]:
        filtered_records = []
        for record in records:
            include = True
{%-         for filter_expr in filters %}
            try:
{%-             set filter_parts = filter_expr.split(' ', 2) %}
{%-             set field = filter_parts[0] %}
{%-             set operation = filter_parts[1] %}
{%-             set value = filter_parts[2] %}

{%-             if operation == '|' and ('netutils.regex.' in value or 'not netutils.regex.' in value) %}
{%-                 set is_negated = 'not ' in value %}
{%-                 set filter_fn = value.replace('not ', '').split('(')[0].strip() %}
{%-                 set regex_pattern = value.replace('not ', '').split('(', 1)[1].rsplit(')', 1)[0].strip('\'') %}
                field_value = getattr(record, '{{ field }}', '') if not isinstance(record, dict) else record.get('{{ field }}', '')
                field_value = field_value or ""
                if {{ 'not ' if not is_negated else '' }}{{ filter_fn }}('{{ regex_pattern }}', field_value):
                    include = False
{%-             elif ('netutils.ip.' in value) %}
{%-                 set is_negated = 'not ' in value %}
                if {{ 'not ' if is_negated else '' }}({{filter_expr.replace('not ', '')}}):
                    include = False
{%-             elif operation in ['==', '!=', '>', '<', '>=', '<='] %}
                field_value = getattr(record, '{{ field }}', 0) if not isinstance(record, dict) else record.get('{{ field }}', 0)
                record_value = int(field_value)
                if not (record_value {{ operation }} {{ value }}):
                    include = False
{%-             else %}
                # /!\ Filter didn't match any working filters, ignored
                pass
{%-             endif %}
            except Exception as e:
                print(f"Error evaluating filter: '{{ filter_expr }}' with record {record}: {e}")
                include = False
{%-         endfor %}
            if include:
                filtered_records.append(record)
        return filtered_records
{%-  endif %}
{%  endif %}
{%- endfor %}
