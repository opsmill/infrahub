[tool.poetry]
name = "infrahub"
version = "0.8.1"
description = ""
authors = ["OpsMill <info@opsmill.com>"]

packages = [
    { include = "infrahub", from = "backend" },
    { include = "infrahub_sync", from = "sync/infrahub-sync"},
    { include = "nornir_infrahub", from = "nornir_plugin"},
    { include = "potenda", from = "sync/potenda"},
]

[tool.poetry.dependencies]
python = "^3.8, < 3.12"
infrahub-sdk = {path = "python_sdk", develop=true}

[tool.poetry.group.server.dependencies]
fastapi = "~0.95"
uvicorn = {version = "~0.21", extras = ["standard"]}
gunicorn = "^20.1"
graphene = "~3.2"
neo4j = "~5.12"
starlette-exporter = "^0.12.0"
aio-pika = "^9"
structlog = "^22.3.0"
asgi-correlation-id = "4.2.0"
bcrypt = "4.0.1"
pyjwt = "2.7.0"
email-validator = "2.0.0"
python-multipart = "^0.0.6"
redis = { version = "^5.0.0", extras = ["hiredis"]}
opentelemetry-api = "^1.16.0"
opentelemetry-sdk = "^1.16.0"
opentelemetry-instrumentation-fastapi = "^0.37b0"
opentelemetry-exporter-otlp-proto-http = "^1.16.0"
opentelemetry-exporter-otlp-proto-grpc = "^1.16.0"

[tool.poetry.group.perf.dependencies]
locust = "^2.13.1"

[tool.poetry.group.dev.dependencies]
pytest = "*"
yamllint = "*"
pylint = "*"
mypy = "*"
ipython = "*"
pytest-asyncio = "*"
requests = "*"
pre-commit = "^2.20.0"
autoflake = "*"
pytest-clarity = "^1.0.1"
pytest-httpx = "^0.22"
types-toml = "*"
types-ujson = "*"
types-pyyaml = "*"
typer-cli = "*"
pytest-cov = "^4.0.0"
ruff = "^0.1.5"
pytest-xdist = "^3.3.1"
buildkite-test-collector = "^0.1.7"
types-python-slugify = "^8.0.0.3"


[tool.poetry.group.sync.dependencies]
dagster = "^1.1.19"
dagit = "^1.1.19"
structlog = "^22.3.0"
pynetbox = "^7.0.1"
pynautobot = "^1.5.0"
diffsync = "^1.8.0"


[tool.poetry.group.nornir.dependencies]
nornir = "^3.3.0"
nornir-utils = "^0.2.0"
python-slugify = "^8.0.1"
ruamel-yaml = "0.18.5"

[tool.poetry.scripts]
infrahub = "infrahub.cli:app"
infrahub-git-credential = "infrahub.git_credential.helper:app"
infrahub-git-askpass = "infrahub.git_credential.askpass:app"
infrahub-sync = "infrahub_sync.cli:app"

[tool.poetry.plugins."nornir.plugins.inventory"]
"InfrahubInventory" = "nornir_infrahub.plugins.inventory.infrahub:InfrahubInventory"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "raise NotImplementedError()"
]

[tool.pylint.general]
extension-pkg-whitelist = [
    "pydantic",
    "ujson",
]

[tool.pylint.format]
disable = "logging-fstring-interpolation"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions.
no-docstring-rgx="^(_|test_)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
disable = """,
    line-too-long,
    missing-module-docstring,
    missing-function-docstring,
    missing-class-docstring,
    consider-using-from-import,
    invalid-name,
    too-many-arguments,
    too-many-locals,
    keyword-arg-before-vararg,
    too-few-public-methods,
    too-many-instance-attributes,
    fixme,
    consider-using-f-string,
    protected-access,
    import-self,
    wrong-import-order,
    """

[tool.pylint.miscellaneous]
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint.similarities]
min-similarity-lines = 20

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "tests"
]
filterwarnings = [
    "ignore:Module already imported so cannot be rewritten",
    "ignore:the imp module is deprecated",
    "ignore:Deprecated call to",
]
addopts = "-vs --cov-report term-missing --cov-report xml --dist loadscope"


[tool.mypy]
pretty = true
ignore_missing_imports = true
exclude = "^backend/tests/"

[[tool.mypy.overrides]]
module = "infrahub.*"
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "infrahub.api.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.auth"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.checks"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.config"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.database"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.exceptions"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.git.repository"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.git_credential.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.lock"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.message_bus"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.message_bus.operations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.message_bus.rpc"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.serve.log"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "infrahub.server"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.storage.main"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "infrahub.tasks.registry"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.test_data.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.trace"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.transforms"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.types"
disallow_untyped_defs = false


[tool.ruff]
line-length = 120

exclude = [
        ".git",
        ".tox",
        ".venv",
        "env",
        "_build",
        "build",
        "dist",
        "examples",
]

task-tags = [
    "FIXME",
    "TODO",
    "XXX",
]

[tool.ruff.lint]
select = [
    # mccabe complexity
    "C90",
    # pycodestyle errors
    "E",
    # pycodestyle warnings
    "W",
    # pyflakes
    "F",
    # isort-like checks
    "I",
    # flake8-datetimez
    "DTZ",
    # flake8-import-conventions
    "ICN",
    # flake8-type-checking
    "TCH",
    # flake8-debugger
    "T10",
    # flake8-quotes
    "Q",
    # flake8-2020
    "YTT",
]

#https://docs.astral.sh/ruff/formatter/black/
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["infrahub"]

[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.ruff.mccabe]
# Target max-complexity=10
max-complexity = 31

[tool.ruff.per-file-ignores]

"backend/infrahub/git/repository.py" = [
    "TCH003", # Pydantic needs UUID import to not only be available under TYPE_CHECKING clause
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
