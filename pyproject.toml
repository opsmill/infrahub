[tool.poetry]
name = "infrahub"
version = "0.13.0-dev"
description = ""
authors = ["OpsMill <info@opsmill.com>"]

packages = [
    { include = "infrahub", from = "backend" }
]


[tool.poetry.group.test-scale]
optional = true

[tool.poetry.dependencies]
python = "^3.9, < 3.13"
neo4j = "~5.18"
infrahub-sdk = {path = "python_sdk", extras = ["ctl","tests"], develop=true}
pydantic = "~2.6"
pydantic-settings = "~2.2"
pytest = "~7.4"
aio-pika = "~9.4"
structlog = "24.1.0"
boto3 = "~1.33.11"
email-validator = "~2.1"
redis = { version = "^5.0.0", extras = ["hiredis"]}
typer = "~0.7"

# Dependencies specific to the API Server
fastapi = "~0.110"
fastapi-storages = "~0.3"
graphene = "~3.3"
gunicorn = "^22.0.0"
lunr = "^0.7.0.post1"
starlette-exporter = "~0.21"
python-multipart = "0.0.9"          # Required by FastAPI to upload large files
asgi-correlation-id = "4.2.0"       # Middleware for FastAPI to generate ID per request
bcrypt = "~4.1"                     # Used to hash and validate password
pyjwt = "~2.8"                      # Used to manage JWT tokens
uvicorn = {version = "~0.27", extras = ["standard"]}
opentelemetry-instrumentation-aio-pika = "^0.45b0"
opentelemetry-instrumentation-fastapi = "^0.45b0"
opentelemetry-exporter-otlp-proto-grpc = "^1.24.0"
opentelemetry-exporter-otlp-proto-http = "^1.24.0"

[tool.poetry.group.dev.dependencies]
yamllint = "*"
pylint = "*"
mypy = "*"
ipython = "~8"
pytest-asyncio = "^0.21.1"
pytest-httpx = [
    { version = "~0.21", python = "<3.9"},
    { version = ">=0.30", python = ">=3.9"},
]
pytest-clarity = "~1.0"
pytest-cov = "~4.1"
pytest-xdist = "~3.4"
types-python-slugify = "^8.0.0.3"
pre-commit = "^2.20.0"
types-toml = "*"
types-ujson = "*"
types-pyyaml = "*"
typer-cli = "*"
ruff = "0.4.1"
invoke = "2.2.0"
pytest-benchmark = "^4.0.0"
pytest-codspeed = "^2.2.0"
deepdiff = "^6.2"

[tool.poetry.group.test-scale.dependencies]
locust = "^2.20.1"
docker = "^7.0.0"
matplotlib = "^3.8"
pandas = "^2.2"

[tool.poetry.scripts]
infrahub = "infrahub.cli:app"
infrahub-git-credential = "infrahub.git_credential.helper:app"
infrahub-git-askpass = "infrahub.git_credential.askpass:app"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "raise NotImplementedError()"
]

[tool.pylint.general]
extension-pkg-whitelist = [
    "pydantic",
    "ujson",
]

[tool.pylint.format]
disable = "logging-fstring-interpolation"

[tool.pylint.basic]
# No docstrings required for private methods (Pylint default), or for test_ functions.
no-docstring-rgx="^(_|test_)"

[tool.pylint.messages_control]
# Line length is enforced by Black, so pylint doesn't need to check it.
# Pylint and Black disagree about how to format multi-line arrays; Black wins.
# assigning-non-slot,no-member,unsupported-membership-test,unsubscriptable-object,unsupported-assignment-operation,not-an-iterable
# are disabled because of our move to pydantic 2, pylint does not seem to respect the type hint for pydantic 2 model fields.
disable = """,
    line-too-long,
    missing-module-docstring,
    missing-function-docstring,
    missing-class-docstring,
    consider-using-from-import,
    invalid-name,
    too-many-arguments,
    too-many-locals,
    keyword-arg-before-vararg,
    too-few-public-methods,
    too-many-instance-attributes,
    fixme,
    consider-using-f-string,
    protected-access,
    import-self,
    wrong-import-order,
    assigning-non-slot,
    no-member,
    unsupported-membership-test,
    unsubscriptable-object,
    unsupported-assignment-operation,
    not-an-iterable,
    too-many-return-statements,
    unnecessary-comprehension,
    multiple-statements,
    """

[tool.pylint.miscellaneous]
notes = """,
    FIXME,
    XXX,
    """

[tool.pylint.similarities]
min-similarity-lines = 20

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "tests"
]
filterwarnings = [
    "ignore:Module already imported so cannot be rewritten",
    "ignore:Deprecated call to",
]
addopts = "-vs --cov-report term-missing --cov-report xml --dist loadscope --junitxml=pytest-junit.xml"
junit_duration_report = "call"

[tool.mypy]
pretty = true
ignore_missing_imports = true
disallow_untyped_defs = true
exclude = [
    "^backend/tests/scale",
    "^backend/tests/unit",
]

[[tool.mypy.overrides]]
module = "infrahub.*"
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.benchmark.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "tests.conftest"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "tests.fixtures.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "tests.integration.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "infrahub.api.artifact"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.api.diff.diff"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.api.storage"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.auth"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.account"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.attribute"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.manager"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.node"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.node.base"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.node.standard"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query.attribute"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query.diff"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query.ipam"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query.node"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query.relationship"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query.standard_node"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.query.subquery"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.schema.basenode_schema"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.schema_manager"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.core.utils"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.database"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.exceptions"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.git.repository"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.git_credential.askpass"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.api.endpoints"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.app"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.mutations.attribute"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.mutations.ipam"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.mutations.main"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.mutations.proposed_change"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.mutations.relationship"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.mutations.repository"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.mutations.schema"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.query"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.resolver"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.schema"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.subscription"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.subscription.graphql_query"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.types.attribute"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.types.mixin"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.types.node"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.types.interface"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.types.standard_node"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.graphql.utils"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.lock"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.message_bus.operations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.test_data.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.trace"
ignore_errors = true

[[tool.mypy.overrides]]
module = "infrahub.types"
disallow_untyped_defs = false


[tool.ruff]
line-length = 120

exclude = [
        ".git",
        ".tox",
        ".venv",
        "env",
        "_build",
        "build",
        "dist",
        "examples",
]



[tool.ruff.lint]
preview = true

task-tags = [
    "FIXME",
    "TODO",
    "XXX",
]

select = [
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "C90",   # mccabe complexity
    "DJ",    # flake8-django
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "I",     # isort-like checks
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "N",     # pep8-naming
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "TCH",   # flake8-type-checking
    "TRIO",  # flake8-trio
    "T10",   # flake8-debugger
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
]

ignore = [

##################################################################################################
# The ignored rules below should be removed once the code has been updated, they are included    #
# like this so that we can reactivate them one by one. Alternatively ignored after further       #
# investigation if they are deemed to not make sense.                                            #
##################################################################################################
    "ASYNC101", # Async functions should not call `open`, `time.sleep`, or `subprocess` methods
    "B007",     # Loop control variable not used within loop body
    "B008",     # Do not perform function call `Depends` in argument defaults;
    "B009",     # [*] Do not call `getattr` with a constant attribute value. It is not any safer than normal property access.
    "B010",     # [*] Do not call `setattr` with a constant attribute value. It is not any safer than normal property access.
    "B026",     # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904",     # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "C403",     # Unnecessary `list` comprehension (rewrite as a `set` comprehension)
    "C409",     # Unnecessary `list` literal passed to `tuple()` (rewrite as a `tuple` literal)
    "C414",     # Unnecessary `list` call within `sorted()`
    "N801",     # Class name should use CapWords convention
    "N802",     # Function name should be lowercase
    "N805",     # First argument of a method should be named self
    "N806",     # Variable in function should be lowercase
    "N811",     # Constant imported as non-constant
    "N812",     # Lowercase imported as non-lowercase
    "PLC0415",  # `import` should be at the top-level of a file
    "PLC2701",  # Private name import from external module
    "PLR0904",  # Too many public methods
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR0916",  # Too many Boolean expressions
    "PLR0917",  # Too many positional arguments
    "PLR1702",  # Too many nested blocks
    "PLR2004",  # Magic value used in comparison this could possibly be fine in the tests folders
    "PLR6201",  # Use a `set` literal when testing for membership
    "PLR6301",  # Method could be a function, class method, or static method
    "PLW0603",  # Using the global statement to update `SETTINGS` is discouraged
    "PLW1508",  # Invalid type for environment variable default; expected `str` or `None`
    "PLW3201",  # Bad or misspelled dunder method name `__init_subclass_with_meta__`
    "RET503",   # Missing explicit `return` at the end of function able to return non-`None` value
    "RET504",   # Unnecessary assignment before `return` statement
]

#https://docs.astral.sh/ruff/formatter/black/
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["infrahub"]

[tool.ruff.lint.pycodestyle]
max-line-length = 150

[tool.ruff.lint.mccabe]
# Target max-complexity=10
max-complexity = 33

[tool.ruff.lint.per-file-ignores]

"backend/infrahub/git/repository.py" = [
    "TCH003", # Pydantic needs UUID import to not only be available under TYPE_CHECKING clause
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
