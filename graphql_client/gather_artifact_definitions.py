# Generated by ariadne-codegen
# Source: queries/sdk/

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class GatherArtifactDefinitions(BaseModel):
    core_artifact_definition: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinition"
    ] = Field(alias="CoreArtifactDefinition")


class GatherArtifactDefinitionsCoreArtifactDefinition(BaseModel):
    edges: Optional[
        List[Optional["GatherArtifactDefinitionsCoreArtifactDefinitionEdges"]]
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdges(BaseModel):
    node: Optional["GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNode"]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNode(BaseModel):
    id: str
    name: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeName"
    content_type: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeContentType"
    transformation: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformation"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeName(BaseModel):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeContentType(BaseModel):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformation(BaseModel):
    node: Optional[
        Annotated[
            Union[
                "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformation",
                "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2",
                "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPython",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformation(
    BaseModel
):
    typename__: Literal["CoreTransformation"] = Field(alias="__typename")
    timeout: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationTimeout"
    ]
    rebase: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationRebase"
    ]
    query: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQuery"
    ]
    repository: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationRepository"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationTimeout(
    BaseModel
):
    value: Optional[int]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationRebase(
    BaseModel
):
    value: Optional[bool]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQuery(
    BaseModel
):
    node: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQueryNode"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQueryNode(
    BaseModel
):
    models: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQueryNodeModels"
    ]
    name: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQueryNodeName"


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQueryNodeModels(
    BaseModel
):
    value: Optional[Any]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationQueryNodeName(
    BaseModel
):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationRepository(
    BaseModel
):
    node: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationRepositoryNode"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformationRepositoryNode(
    BaseModel
):
    typename__: Literal[
        "CoreGenericRepository", "CoreReadOnlyRepository", "CoreRepository"
    ] = Field(alias="__typename")
    id: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2(
    BaseModel
):
    typename__: Literal["CoreTransformJinja2"] = Field(alias="__typename")
    timeout: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Timeout"
    ]
    rebase: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Rebase"
    ]
    query: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Query"
    ]
    template_path: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2TemplatePath"
    repository: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Repository"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Timeout(
    BaseModel
):
    value: Optional[int]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Rebase(
    BaseModel
):
    value: Optional[bool]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Query(
    BaseModel
):
    node: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2QueryNode"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2QueryNode(
    BaseModel
):
    models: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2QueryNodeModels"
    ]
    name: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2QueryNodeName"


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2QueryNodeModels(
    BaseModel
):
    value: Optional[Any]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2QueryNodeName(
    BaseModel
):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2TemplatePath(
    BaseModel
):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2Repository(
    BaseModel
):
    node: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2RepositoryNode"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformJinja2RepositoryNode(
    BaseModel
):
    typename__: Literal[
        "CoreGenericRepository", "CoreReadOnlyRepository", "CoreRepository"
    ] = Field(alias="__typename")
    id: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPython(
    BaseModel
):
    typename__: Literal["CoreTransformPython"] = Field(alias="__typename")
    timeout: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonTimeout"
    ]
    rebase: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonRebase"
    ]
    query: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQuery"
    ]
    class_name: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonClassName"
    file_path: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonFilePath"
    repository: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonRepository"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonTimeout(
    BaseModel
):
    value: Optional[int]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonRebase(
    BaseModel
):
    value: Optional[bool]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQuery(
    BaseModel
):
    node: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQueryNode"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQueryNode(
    BaseModel
):
    models: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQueryNodeModels"
    ]
    name: "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQueryNodeName"


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQueryNodeModels(
    BaseModel
):
    value: Optional[Any]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonQueryNodeName(
    BaseModel
):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonClassName(
    BaseModel
):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonFilePath(
    BaseModel
):
    value: Optional[str]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonRepository(
    BaseModel
):
    node: Optional[
        "GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonRepositoryNode"
    ]


class GatherArtifactDefinitionsCoreArtifactDefinitionEdgesNodeTransformationNodeCoreTransformPythonRepositoryNode(
    BaseModel
):
    typename__: Literal[
        "CoreGenericRepository", "CoreReadOnlyRepository", "CoreRepository"
    ] = Field(alias="__typename")
    id: Optional[str]
