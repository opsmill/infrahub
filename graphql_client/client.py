# Generated by ariadne-codegen
# Source: queries/sdk/

from typing import Any, Dict, List, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .create_task import CreateTask
from .enums import TaskConclusion
from .gather_artifact_definitions import GatherArtifactDefinitions
from .get_branch import GetBranch
from .get_branches import GetBranches
from .input_types import RelatedTaskLogCreateInput
from .rebase_branch import RebaseBranch
from .update_task import UpdateTask


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def gather_artifact_definitions(
        self, **kwargs: Any
    ) -> GatherArtifactDefinitions:
        query = gql(
            """
            query GatherArtifactDefinitions {
              CoreArtifactDefinition {
                edges {
                  node {
                    id
                    name {
                      value
                    }
                    content_type {
                      value
                    }
                    transformation {
                      node {
                        __typename
                        timeout {
                          value
                        }
                        rebase {
                          value
                        }
                        query {
                          node {
                            models {
                              value
                            }
                            name {
                              value
                            }
                          }
                        }
                        ... on CoreTransformJinja2 {
                          template_path {
                            value
                          }
                        }
                        ... on CoreTransformPython {
                          class_name {
                            value
                          }
                          file_path {
                            value
                          }
                        }
                        repository {
                          node {
                            __typename
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="GatherArtifactDefinitions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GatherArtifactDefinitions.model_validate(data)

    async def get_branch(self, branch_name: str, **kwargs: Any) -> GetBranch:
        query = gql(
            """
            query GetBranch($branch_name: String!) {
              Branch(name: $branch_name) {
                id
                name
                description
                origin_branch
                branched_from
                is_default
                is_data_only
              }
            }
            """
        )
        variables: Dict[str, object] = {"branch_name": branch_name}
        response = await self.execute(
            query=query, operation_name="GetBranch", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetBranch.model_validate(data)

    async def get_branches(self, **kwargs: Any) -> GetBranches:
        query = gql(
            """
            query GetBranches {
              Branch {
                id
                name
                description
                origin_branch
                branched_from
                is_default
                is_data_only
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="GetBranches", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetBranches.model_validate(data)

    async def rebase_branch(self, name: str, **kwargs: Any) -> RebaseBranch:
        query = gql(
            """
            mutation RebaseBranch($name: String!) {
              BranchRebase(data: {name: $name}) {
                ok
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name}
        response = await self.execute(
            query=query, operation_name="RebaseBranch", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return RebaseBranch.model_validate(data)

    async def create_task(
        self,
        conclusion: TaskConclusion,
        title: str,
        related_node: str,
        task_id: Union[Optional[Any], UnsetType] = UNSET,
        created_by: Union[Optional[str], UnsetType] = UNSET,
        logs: Union[
            Optional[List[Optional[RelatedTaskLogCreateInput]]], UnsetType
        ] = UNSET,
        **kwargs: Any
    ) -> CreateTask:
        query = gql(
            """
            mutation CreateTask($conclusion: TaskConclusion!, $title: String!, $task_id: UUID, $related_node: String!, $created_by: String, $logs: [RelatedTaskLogCreateInput]) {
              InfrahubTaskCreate(
                data: {id: $task_id, title: $title, related_node: $related_node, conclusion: $conclusion, created_by: $created_by, logs: $logs}
              ) {
                ok
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "conclusion": conclusion,
            "title": title,
            "task_id": task_id,
            "related_node": related_node,
            "created_by": created_by,
            "logs": logs,
        }
        response = await self.execute(
            query=query, operation_name="CreateTask", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateTask.model_validate(data)

    async def update_task(
        self,
        task_id: Any,
        conclusion: Union[Optional[TaskConclusion], UnsetType] = UNSET,
        title: Union[Optional[str], UnsetType] = UNSET,
        logs: Union[
            Optional[List[Optional[RelatedTaskLogCreateInput]]], UnsetType
        ] = UNSET,
        **kwargs: Any
    ) -> UpdateTask:
        query = gql(
            """
            mutation UpdateTask($conclusion: TaskConclusion, $title: String, $task_id: UUID!, $logs: [RelatedTaskLogCreateInput]) {
              InfrahubTaskUpdate(
                data: {id: $task_id, title: $title, conclusion: $conclusion, logs: $logs}
              ) {
                ok
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "conclusion": conclusion,
            "title": title,
            "task_id": task_id,
            "logs": logs,
        }
        response = await self.execute(
            query=query, operation_name="UpdateTask", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateTask.model_validate(data)
