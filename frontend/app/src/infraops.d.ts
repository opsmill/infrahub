/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/artifact/{artifact_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Artifact */
    get: operations["get_artifact_api_artifact__artifact_id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/artifact/generate/{artifact_definition_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Generate Artifact */
    post: operations["generate_artifact_api_artifact_generate__artifact_definition_id__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login User */
    post: operations["login_user_api_auth_login_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh Jwt Token */
    post: operations["refresh_jwt_token_api_auth_refresh_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout */
    post: operations["logout_api_auth_logout_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/diff/data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Diff Data */
    get: operations["get_diff_data_api_diff_data_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/diff/schema": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Diff Schema */
    get: operations["get_diff_schema_api_diff_schema_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/diff/files": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Diff Files */
    get: operations["get_diff_files_api_diff_files_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/diff/artifacts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Diff Artifacts */
    get: operations["get_diff_artifacts_api_diff_artifacts_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/file/{repository_id}/{file_path}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get File
     * @description Retrieve a file from a git repository.
     */
    get: operations["get_file_api_file__repository_id___file_path__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/config": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Config */
    get: operations["get_config_api_config_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Info */
    get: operations["get_info_api_info_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/menu": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Menu */
    get: operations["get_menu_api_menu_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/menu/new": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get New Menu */
    get: operations["get_new_menu_api_menu_new_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oauth2/{provider_name}/authorize": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Authorize */
    get: operations["authorize_api_oauth2__provider_name__authorize_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oauth2/{provider_name}/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Token */
    get: operations["token_api_oauth2__provider_name__token_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oidc/{provider_name}/authorize": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Authorize */
    get: operations["authorize_api_oidc__provider_name__authorize_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/oidc/{provider_name}/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Token */
    get: operations["token_api_oidc__provider_name__token_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/query/{query_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Graphql Query Get */
    get: operations["graphql_query_get_api_query__query_id__get"];
    put?: never;
    /** Graphql Query Post */
    post: operations["graphql_query_post_api_query__query_id__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/schema": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Schema */
    get: operations["get_schema_api_schema_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/schema/summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Schema Summary */
    get: operations["get_schema_summary_api_schema_summary_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/schema/{schema_kind}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Schema By Kind */
    get: operations["get_schema_by_kind_api_schema__schema_kind__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/schema/json_schema/{schema_kind}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Json Schema By Kind */
    get: operations["get_json_schema_by_kind_api_schema_json_schema__schema_kind__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/schema/load": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Load Schema */
    post: operations["load_schema_api_schema_load_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/schema/check": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Check Schema */
    post: operations["check_schema_api_schema_check_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/storage/object/{identifier}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get File */
    get: operations["get_file_api_storage_object__identifier__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/storage/upload/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload Content */
    post: operations["upload_content_api_storage_upload_content_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/storage/upload/file": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload File */
    post: operations["upload_file_api_storage_upload_file_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/transform/python/{transform_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Transform Python */
    get: operations["transform_python_api_transform_python__transform_id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/transform/jinja2/{transform_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Transform Jinja2 */
    get: operations["transform_jinja2_api_transform_jinja2__transform_id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** APIGenericSchema */
    APIGenericSchema: {
      /**
       * Id
       * @description The ID of the node
       */
      id?: string | null;
      /**
       * @description Expected state of the node/generic after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Node name, must be unique within a namespace and must start with an uppercase letter.
       */
      name: string;
      /**
       * Namespace
       * @description Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.
       */
      namespace: string;
      /**
       * Description
       * @description Short description of the model, will be visible in the frontend.
       */
      description?: string | null;
      /**
       * Label
       * @description Human friendly representation of the name/kind
       */
      label?: string | null;
      /**
       * @description Type of branch support for the model.
       * @default aware
       */
      branch: components["schemas"]["BranchSupportType"];
      /**
       * Default Filter
       * @description Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)
       */
      default_filter?: string | null;
      /**
       * Human Friendly Id
       * @description Human friendly and unique identifier for the object.
       */
      human_friendly_id?: string[] | null;
      /**
       * Display Labels
       * @description List of attributes to use to generate the display label
       */
      display_labels?: string[] | null;
      /**
       * Include In Menu
       * @description Defines if objects of this kind should be included in the menu.
       */
      include_in_menu?: boolean | null;
      /**
       * Menu Placement
       * @description Defines where in the menu this object should be placed.
       */
      menu_placement?: string | null;
      /**
       * Icon
       * @description Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/
       */
      icon?: string | null;
      /**
       * Order By
       * @description List of attributes to use to order the results by default
       */
      order_by?: string[] | null;
      /**
       * Uniqueness Constraints
       * @description List of multi-element uniqueness constraints that can combine relationships and attributes
       */
      uniqueness_constraints?: string[][] | null;
      /**
       * Documentation
       * @description Link to a documentation associated with this object, can be internal or external.
       */
      documentation?: string | null;
      /**
       * Attributes
       * @description Node attributes
       */
      attributes?: components["schemas"]["AttributeSchema-Output"][];
      /**
       * Relationships
       * @description Node Relationships
       */
      relationships?: components["schemas"]["RelationshipSchema"][];
      /**
       * Hierarchical
       * @description Defines if the Generic support the hierarchical mode.
       * @default false
       */
      hierarchical: boolean;
      /**
       * Generate Profile
       * @description Indicate if a profile schema should be generated for this schema
       * @default true
       */
      generate_profile: boolean;
      /**
       * Used By
       * @description List of Nodes that are referencing this Generic
       */
      used_by?: string[];
      /** Kind */
      kind?: string | null;
      /** Hash */
      hash: string;
    };
    /** APINodeSchema */
    APINodeSchema: {
      /**
       * Id
       * @description The ID of the node
       */
      id?: string | null;
      /**
       * @description Expected state of the node/generic after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Node name, must be unique within a namespace and must start with an uppercase letter.
       */
      name: string;
      /**
       * Namespace
       * @description Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.
       */
      namespace: string;
      /**
       * Description
       * @description Short description of the model, will be visible in the frontend.
       */
      description?: string | null;
      /**
       * Label
       * @description Human friendly representation of the name/kind
       */
      label?: string | null;
      /**
       * @description Type of branch support for the model.
       * @default aware
       */
      branch: components["schemas"]["BranchSupportType"];
      /**
       * Default Filter
       * @description Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)
       */
      default_filter?: string | null;
      /**
       * Human Friendly Id
       * @description Human friendly and unique identifier for the object.
       */
      human_friendly_id?: string[] | null;
      /**
       * Display Labels
       * @description List of attributes to use to generate the display label
       */
      display_labels?: string[] | null;
      /**
       * Include In Menu
       * @description Defines if objects of this kind should be included in the menu.
       */
      include_in_menu?: boolean | null;
      /**
       * Menu Placement
       * @description Defines where in the menu this object should be placed.
       */
      menu_placement?: string | null;
      /**
       * Icon
       * @description Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/
       */
      icon?: string | null;
      /**
       * Order By
       * @description List of attributes to use to order the results by default
       */
      order_by?: string[] | null;
      /**
       * Uniqueness Constraints
       * @description List of multi-element uniqueness constraints that can combine relationships and attributes
       */
      uniqueness_constraints?: string[][] | null;
      /**
       * Documentation
       * @description Link to a documentation associated with this object, can be internal or external.
       */
      documentation?: string | null;
      /**
       * Attributes
       * @description Node attributes
       */
      attributes?: components["schemas"]["AttributeSchema-Output"][];
      /**
       * Relationships
       * @description Node Relationships
       */
      relationships?: components["schemas"]["RelationshipSchema"][];
      /**
       * Inherit From
       * @description List of Generic Kind that this node is inheriting from
       */
      inherit_from?: string[];
      /**
       * Generate Profile
       * @description Indicate if a profile schema should be generated for this schema
       * @default true
       */
      generate_profile: boolean;
      /**
       * Hierarchy
       * @description Internal value to track the name of the Hierarchy, must match the name of a Generic supporting hierarchical mode
       */
      hierarchy?: string | null;
      /**
       * Parent
       * @description Expected Kind for the parent node in a Hierarchy, default to the main generic defined if not defined.
       */
      parent?: string | null;
      /**
       * Children
       * @description Expected Kind for the children nodes in a Hierarchy, default to the main generic defined if not defined.
       */
      children?: string | null;
      /** Kind */
      kind?: string | null;
      /** Hash */
      hash: string;
    };
    /** APIProfileSchema */
    APIProfileSchema: {
      /**
       * Id
       * @description The ID of the node
       */
      id?: string | null;
      /**
       * @description Expected state of the node/generic after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Node name, must be unique within a namespace and must start with an uppercase letter.
       */
      name: string;
      /**
       * Namespace
       * @description Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.
       */
      namespace: string;
      /**
       * Description
       * @description Short description of the model, will be visible in the frontend.
       */
      description?: string | null;
      /**
       * Label
       * @description Human friendly representation of the name/kind
       */
      label?: string | null;
      /**
       * @description Type of branch support for the model.
       * @default aware
       */
      branch: components["schemas"]["BranchSupportType"];
      /**
       * Default Filter
       * @description Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)
       */
      default_filter?: string | null;
      /**
       * Human Friendly Id
       * @description Human friendly and unique identifier for the object.
       */
      human_friendly_id?: string[] | null;
      /**
       * Display Labels
       * @description List of attributes to use to generate the display label
       */
      display_labels?: string[] | null;
      /**
       * Include In Menu
       * @description Defines if objects of this kind should be included in the menu.
       */
      include_in_menu?: boolean | null;
      /**
       * Menu Placement
       * @description Defines where in the menu this object should be placed.
       */
      menu_placement?: string | null;
      /**
       * Icon
       * @description Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/
       */
      icon?: string | null;
      /**
       * Order By
       * @description List of attributes to use to order the results by default
       */
      order_by?: string[] | null;
      /**
       * Uniqueness Constraints
       * @description List of multi-element uniqueness constraints that can combine relationships and attributes
       */
      uniqueness_constraints?: string[][] | null;
      /**
       * Documentation
       * @description Link to a documentation associated with this object, can be internal or external.
       */
      documentation?: string | null;
      /**
       * Attributes
       * @description Node attributes
       */
      attributes?: components["schemas"]["AttributeSchema-Output"][];
      /**
       * Relationships
       * @description Node Relationships
       */
      relationships?: components["schemas"]["RelationshipSchema"][];
      /**
       * Inherit From
       * @description List of Generic Kind that this profile is inheriting from
       */
      inherit_from?: string[];
      /** Kind */
      kind?: string | null;
      /** Hash */
      hash: string;
    };
    /** AccessTokenResponse */
    AccessTokenResponse: {
      /**
       * Access Token
       * @description JWT access_token
       */
      access_token: string;
    };
    /**
     * AllowOverrideType
     * @enum {string}
     */
    AllowOverrideType: "none" | "any";
    /** AnalyticsSettings */
    AnalyticsSettings: {
      /**
       * Enable
       * @default true
       */
      enable: boolean;
      /** Address */
      address?: string | null;
      /** Api Key */
      api_key?: string | null;
    };
    /** ArtifactGeneratePayload */
    ArtifactGeneratePayload: {
      /** Nodes */
      nodes?: string[];
    };
    /** ArtifactTarget */
    ArtifactTarget: {
      /** Id */
      id: string;
      /** Kind */
      kind: string;
      /** Display Label */
      display_label?: string | null;
    };
    /** AttributeSchema */
    "AttributeSchema-Input": {
      /**
       * Id
       * @description The ID of the attribute
       */
      id?: string | null;
      /**
       * @description Expected state of the attribute after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Attribute name, must be unique within a model and must be all lowercase.
       */
      name: string;
      /**
       * Kind
       * @description Defines the type of the attribute.
       */
      kind: string;
      /**
       * Enum
       * @description Define a list of valid values for the attribute.
       */
      enum?: unknown[] | null;
      /**
       * Choices
       * @description Define a list of valid choices for a dropdown attribute.
       */
      choices?: components["schemas"]["DropdownChoice"][] | null;
      /**
       * Regex
       * @description Regex uses to limit the characters allowed in for the attributes.
       */
      regex?: string | null;
      /**
       * Max Length
       * @description Set a maximum number of characters allowed for a given attribute.
       */
      max_length?: number | null;
      /**
       * Min Length
       * @description Set a minimum number of characters allowed for a given attribute.
       */
      min_length?: number | null;
      /**
       * Label
       * @description Human friendly representation of the name. Will be autogenerated if not provided
       */
      label?: string | null;
      /**
       * Description
       * @description Short description of the attribute.
       */
      description?: string | null;
      /**
       * Read Only
       * @description Set the attribute as Read-Only, users won't be able to change its value. Mainly relevant for internal object.
       * @default false
       */
      read_only: boolean;
      /**
       * Unique
       * @description Indicate if the value of this attribute must be unique in the database for a given model.
       * @default false
       */
      unique: boolean;
      /**
       * Optional
       * @description Indicate if this attribute is mandatory or optional.
       * @default false
       */
      optional: boolean;
      /** @description Type of branch support for the attribute, if not defined it will be inherited from the node. */
      branch?: components["schemas"]["BranchSupportType"] | null;
      /**
       * Order Weight
       * @description Number used to order the attribute in the frontend (table and view). Lowest value will be ordered first.
       */
      order_weight?: number | null;
      /**
       * Default Value
       * @description Default value of the attribute.
       */
      default_value?: unknown | null;
      /**
       * Inherited
       * @description Internal value to indicate if the attribute was inherited from a Generic node.
       * @default false
       */
      inherited: boolean;
      /**
       * @description Type of allowed override for the attribute.
       * @default any
       */
      allow_override: components["schemas"]["AllowOverrideType"];
    };
    /** AttributeSchema */
    "AttributeSchema-Output": {
      /**
       * Id
       * @description The ID of the attribute
       */
      id?: string | null;
      /**
       * @description Expected state of the attribute after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Attribute name, must be unique within a model and must be all lowercase.
       */
      name: string;
      /**
       * Kind
       * @description Defines the type of the attribute.
       */
      kind: string;
      /**
       * Enum
       * @description Define a list of valid values for the attribute.
       */
      enum?: unknown[] | null;
      /**
       * Choices
       * @description Define a list of valid choices for a dropdown attribute.
       */
      choices?: components["schemas"]["DropdownChoice"][] | null;
      /**
       * Regex
       * @description Regex uses to limit the characters allowed in for the attributes.
       */
      regex?: string | null;
      /**
       * Max Length
       * @description Set a maximum number of characters allowed for a given attribute.
       */
      max_length?: number | null;
      /**
       * Min Length
       * @description Set a minimum number of characters allowed for a given attribute.
       */
      min_length?: number | null;
      /**
       * Label
       * @description Human friendly representation of the name. Will be autogenerated if not provided
       */
      label?: string | null;
      /**
       * Description
       * @description Short description of the attribute.
       */
      description?: string | null;
      /**
       * Read Only
       * @description Set the attribute as Read-Only, users won't be able to change its value. Mainly relevant for internal object.
       * @default false
       */
      read_only: boolean;
      /**
       * Unique
       * @description Indicate if the value of this attribute must be unique in the database for a given model.
       * @default false
       */
      unique: boolean;
      /**
       * Optional
       * @description Indicate if this attribute is mandatory or optional.
       * @default false
       */
      optional: boolean;
      /** @description Type of branch support for the attribute, if not defined it will be inherited from the node. */
      branch?: components["schemas"]["BranchSupportType"] | null;
      /**
       * Order Weight
       * @description Number used to order the attribute in the frontend (table and view). Lowest value will be ordered first.
       */
      order_weight?: number | null;
      /**
       * Default Value
       * @description Default value of the attribute.
       */
      default_value?: unknown | null;
      /**
       * Inherited
       * @description Internal value to indicate if the attribute was inherited from a Generic node.
       * @default false
       */
      inherited: boolean;
      /**
       * @description Type of allowed override for the attribute.
       * @default any
       */
      allow_override: components["schemas"]["AllowOverrideType"];
    };
    /** Body_upload_file_api_storage_upload_file_post */
    Body_upload_file_api_storage_upload_file_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** BranchDiff */
    BranchDiff: {
      /** Diffs */
      diffs?: components["schemas"]["BranchDiffEntry"][];
    };
    /** BranchDiffArtifact */
    BranchDiffArtifact: {
      /** Branch */
      branch: string;
      /** Id */
      id: string;
      /** Display Label */
      display_label?: string | null;
      action: components["schemas"]["DiffAction"];
      target?: components["schemas"]["ArtifactTarget"] | null;
      item_new?: components["schemas"]["BranchDiffArtifactStorage"] | null;
      item_previous?: components["schemas"]["BranchDiffArtifactStorage"] | null;
    };
    /** BranchDiffArtifactStorage */
    BranchDiffArtifactStorage: {
      /** Storage Id */
      storage_id: string;
      /** Checksum */
      checksum: string;
    };
    /** BranchDiffElement */
    BranchDiffElement: {
      type: components["schemas"]["DiffElementType"];
      /** Name */
      name: string;
      /** Path */
      path: string;
      /** Change */
      change:
        | components["schemas"]["BranchDiffElementAttribute"]
        | components["schemas"]["BranchDiffElementRelationshipOne"]
        | components["schemas"]["BranchDiffElementRelationshipMany"];
    };
    /** BranchDiffElementAttribute */
    BranchDiffElementAttribute: {
      /** @default Attribute */
      type: components["schemas"]["DiffElementType"];
      /** Branches */
      branches?: string[];
      /**
       * Id
       * @default
       */
      id: string;
      summary?: components["schemas"]["DiffSummary"];
      /** @default unchanged */
      action: components["schemas"]["DiffAction"];
      value?: components["schemas"]["BranchDiffPropertyCollection"] | null;
      /** Properties */
      properties?: {
        [key: string]: components["schemas"]["BranchDiffPropertyCollection"] | undefined;
      };
    };
    /** BranchDiffElementRelationshipMany */
    BranchDiffElementRelationshipMany: {
      /** @default RelationshipMany */
      type: components["schemas"]["DiffElementType"];
      /**
       * Identifier
       * @default
       */
      identifier: string;
      /** Branches */
      branches?: string[];
      summary?: components["schemas"]["DiffSummary"];
      /** Peers */
      peers?: {
        [key: string]: components["schemas"]["BranchDiffElementRelationshipManyPeer"] | undefined;
      };
    };
    /** BranchDiffElementRelationshipManyPeer */
    BranchDiffElementRelationshipManyPeer: {
      /** Branches */
      branches?: string[];
      peer: components["schemas"]["BranchDiffRelationshipPeerNode"];
      /** Path */
      path: string;
      /** Properties */
      properties?: {
        [key: string]: components["schemas"]["BranchDiffPropertyCollection"] | undefined;
      };
      /** Changed At */
      changed_at?: string | null;
      /** Action */
      action?: {
        [key: string]: components["schemas"]["DiffAction"] | undefined;
      };
    };
    /** BranchDiffElementRelationshipOne */
    BranchDiffElementRelationshipOne: {
      /** @default RelationshipOne */
      type: components["schemas"]["DiffElementType"];
      /**
       * Id
       * @default
       */
      id: string;
      /**
       * Identifier
       * @default
       */
      identifier: string;
      /** Branches */
      branches?: string[];
      summary?: components["schemas"]["DiffSummary"];
      peer?: components["schemas"]["BranchDiffRelationshipOnePeerCollection"] | null;
      /** Properties */
      properties?: {
        [key: string]: components["schemas"]["BranchDiffPropertyCollection"] | undefined;
      };
      /** Changed At */
      changed_at?: string | null;
      /** Action */
      action?: {
        [key: string]: components["schemas"]["DiffAction"] | undefined;
      };
    };
    /** BranchDiffEntry */
    BranchDiffEntry: {
      /** Kind */
      kind: string;
      /** Id */
      id: string;
      /** Path */
      path: string;
      /** Elements */
      elements?: {
        [key: string]: components["schemas"]["BranchDiffElement"] | undefined;
      };
      summary?: components["schemas"]["DiffSummary"];
      /** Action */
      action?: {
        [key: string]: components["schemas"]["DiffAction"] | undefined;
      };
      /** Display Label */
      display_label?: {
        [key: string]: string | undefined;
      };
    };
    /** BranchDiffFile */
    BranchDiffFile: {
      /** Branch */
      branch: string;
      /** Location */
      location: string;
      action: components["schemas"]["DiffAction"];
    };
    /** BranchDiffProperty */
    BranchDiffProperty: {
      /** Branch */
      branch: string;
      /** Type */
      type: string;
      /** Changed At */
      changed_at?: string | null;
      action: components["schemas"]["DiffAction"];
      value: components["schemas"]["BranchDiffPropertyValue"];
    };
    /** BranchDiffPropertyCollection */
    BranchDiffPropertyCollection: {
      /** Path */
      path: string;
      /** Changes */
      changes?: components["schemas"]["BranchDiffProperty"][];
    };
    /** BranchDiffPropertyValue */
    BranchDiffPropertyValue: {
      /** New */
      new?: unknown;
      /** Previous */
      previous?: unknown;
    };
    /** BranchDiffRelationshipOnePeer */
    BranchDiffRelationshipOnePeer: {
      /** Branch */
      branch: string;
      new?: components["schemas"]["BranchDiffRelationshipPeerNode"] | null;
      previous?: components["schemas"]["BranchDiffRelationshipPeerNode"] | null;
    };
    /** BranchDiffRelationshipOnePeerCollection */
    BranchDiffRelationshipOnePeerCollection: {
      /** Path */
      path: string;
      /** Changes */
      changes?: components["schemas"]["BranchDiffRelationshipOnePeer"][];
    };
    /** BranchDiffRelationshipPeerNode */
    BranchDiffRelationshipPeerNode: {
      /** Id */
      id: string;
      /** Kind */
      kind: string;
      /** Display Label */
      display_label?: string | null;
    };
    /** BranchDiffRepository */
    BranchDiffRepository: {
      /** Branch */
      branch: string;
      /** Id */
      id: string;
      /** Display Name */
      display_name?: string | null;
      /** Commit From */
      commit_from: string;
      /** Commit To */
      commit_to: string;
      /** Files */
      files?: components["schemas"]["BranchDiffFile"][];
    };
    /**
     * BranchSupportType
     * @enum {string}
     */
    BranchSupportType: "aware" | "agnostic" | "local";
    /** ConfigAPI */
    ConfigAPI: {
      main: components["schemas"]["MainSettings"];
      logging: components["schemas"]["LoggingSettings"];
      analytics: components["schemas"]["AnalyticsSettings"];
      experimental_features: components["schemas"]["ExperimentalFeaturesSettings"];
      sso: components["schemas"]["SSOInfo"];
    };
    /**
     * DiffAction
     * @enum {string}
     */
    DiffAction: "added" | "removed" | "updated" | "unchanged";
    /**
     * DiffElementType
     * @enum {string}
     */
    DiffElementType: "Attribute" | "RelationshipOne" | "RelationshipMany";
    /** DiffSummary */
    DiffSummary: {
      /**
       * Added
       * @default 0
       */
      added: number;
      /**
       * Removed
       * @default 0
       */
      removed: number;
      /**
       * Updated
       * @default 0
       */
      updated: number;
    };
    /** DropdownChoice */
    DropdownChoice: {
      /** Id */
      id?: string | null;
      /** @default present */
      state: components["schemas"]["HashableModelState"];
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Color */
      color?: string | null;
      /** Label */
      label?: string | null;
    };
    /** ExperimentalFeaturesSettings */
    ExperimentalFeaturesSettings: {
      /**
       * Pull Request
       * @default false
       */
      pull_request: boolean;
      /**
       * Graphql Enums
       * @default false
       */
      graphql_enums: boolean;
    };
    /**
     * GenericSchema
     * @description A Generic can be either an Interface or a Union depending if there are some Attributes or Relationships defined.
     */
    GenericSchema: {
      /**
       * Id
       * @description The ID of the node
       */
      id?: string | null;
      /**
       * @description Expected state of the node/generic after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Node name, must be unique within a namespace and must start with an uppercase letter.
       */
      name: string;
      /**
       * Namespace
       * @description Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.
       */
      namespace: string;
      /**
       * Description
       * @description Short description of the model, will be visible in the frontend.
       */
      description?: string | null;
      /**
       * Label
       * @description Human friendly representation of the name/kind
       */
      label?: string | null;
      /**
       * @description Type of branch support for the model.
       * @default aware
       */
      branch: components["schemas"]["BranchSupportType"];
      /**
       * Default Filter
       * @description Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)
       */
      default_filter?: string | null;
      /**
       * Human Friendly Id
       * @description Human friendly and unique identifier for the object.
       */
      human_friendly_id?: string[] | null;
      /**
       * Display Labels
       * @description List of attributes to use to generate the display label
       */
      display_labels?: string[] | null;
      /**
       * Include In Menu
       * @description Defines if objects of this kind should be included in the menu.
       */
      include_in_menu?: boolean | null;
      /**
       * Menu Placement
       * @description Defines where in the menu this object should be placed.
       */
      menu_placement?: string | null;
      /**
       * Icon
       * @description Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/
       */
      icon?: string | null;
      /**
       * Order By
       * @description List of attributes to use to order the results by default
       */
      order_by?: string[] | null;
      /**
       * Uniqueness Constraints
       * @description List of multi-element uniqueness constraints that can combine relationships and attributes
       */
      uniqueness_constraints?: string[][] | null;
      /**
       * Documentation
       * @description Link to a documentation associated with this object, can be internal or external.
       */
      documentation?: string | null;
      /**
       * Attributes
       * @description Node attributes
       */
      attributes?: components["schemas"]["AttributeSchema-Input"][];
      /**
       * Relationships
       * @description Node Relationships
       */
      relationships?: components["schemas"]["RelationshipSchema"][];
      /**
       * Hierarchical
       * @description Defines if the Generic support the hierarchical mode.
       * @default false
       */
      hierarchical: boolean;
      /**
       * Generate Profile
       * @description Indicate if a profile schema should be generated for this schema
       * @default true
       */
      generate_profile: boolean;
      /**
       * Used By
       * @description List of Nodes that are referencing this Generic
       */
      used_by?: string[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** HashableModelDiff */
    HashableModelDiff: {
      /** Added */
      added?: {
        [key: string]: (components["schemas"]["HashableModelDiff"] | null) | undefined;
      };
      /** Changed */
      changed?: {
        [key: string]: (components["schemas"]["HashableModelDiff"] | null) | undefined;
      };
      /** Removed */
      removed?: {
        [key: string]: (components["schemas"]["HashableModelDiff"] | null) | undefined;
      };
    };
    /**
     * HashableModelState
     * @enum {string}
     */
    HashableModelState: "present" | "absent";
    /** InfoAPI */
    InfoAPI: {
      /** Deployment Id */
      deployment_id: string;
      /** Version */
      version: string;
    };
    /** InterfaceMenu */
    InterfaceMenu: {
      /**
       * Title
       * @description Title of the menu item
       */
      title: string;
      /**
       * Path
       * @description URL endpoint if applicable
       * @default
       */
      path: string;
      /**
       * Icon
       * @description The icon to show for the current view
       * @default
       */
      icon: string;
      /**
       * Children
       * @description Child objects
       */
      children?: components["schemas"]["InterfaceMenu"][];
      /**
       * Kind
       * @default
       */
      kind: string;
    };
    /** JSONSchema */
    JSONSchema: {
      /**
       * Title
       * @description Title of the schema
       */
      title?: string | null;
      /**
       * Description
       * @description Description of the schema
       */
      description?: string | null;
      /**
       * Type
       * @description Type of the schema element (e.g., 'object', 'array', 'string')
       */
      type: string;
      /**
       * Properties
       * @description Properties of the object if type is 'object'
       */
      properties?: Record<string, never> | null;
      /**
       * Items
       * @description Items of the array if type is 'array'
       */
      items?: Record<string, never> | Record<string, never>[] | null;
      /**
       * Required
       * @description List of required properties if type is 'object'
       */
      required?: string[] | null;
      /**
       * $Schema
       * @description Schema version identifier
       */
      $schema?: string | null;
      /**
       * Additionalproperties
       * @description Specifies whether additional properties are allowed
       */
      additionalProperties?: boolean | Record<string, never> | null;
    };
    /** LoggingSettings */
    LoggingSettings: {
      /** @default {
       *       "enable": false
       *     } */
      remote: components["schemas"]["RemoteLoggingSettings"];
    };
    /** MainSettings */
    MainSettings: {
      /**
       * Docs Index Path
       * @description Full path of saved json containing pre-indexed documentation
       * @default /opt/infrahub/docs/build/search-index.json
       */
      docs_index_path: string;
      /** Internal Address */
      internal_address?: string | null;
      /**
       * Allow Anonymous Access
       * @description Indicates if the system allows anonymous read access
       * @default true
       */
      allow_anonymous_access: boolean;
      /**
       * Telemetry Optout
       * @description Disable anonymous usage reporting
       * @default false
       */
      telemetry_optout: boolean;
      /**
       * Telemetry Endpoint
       * @default https://telemetry.opsmill.cloud/infrahub
       */
      telemetry_endpoint: string;
      /**
       * Telemetry Interval
       * @description Time (in seconds) between telemetry usage push
       * @default 86400
       */
      telemetry_interval: number;
      /**
       * Permission Backends
       * @description List of modules to handle permissions, they will be run in the given order
       * @default [
       *       "infrahub.permissions.LocalPermissionBackend"
       *     ]
       */
      permission_backends: string[];
    };
    /** Menu */
    Menu: {
      /** Sections */
      sections?: {
        [key: string]: components["schemas"]["MenuItemList"][] | undefined;
      };
    };
    /** MenuItemList */
    MenuItemList: {
      /**
       * Identifier
       * @description Unique identifier for this menu item
       */
      identifier: string;
      /**
       * Title
       * @description Title of the menu item
       */
      title: string;
      /**
       * Path
       * @description URL endpoint if applicable
       * @default
       */
      path: string;
      /**
       * Icon
       * @description The icon to show for the current view
       * @default
       */
      icon: string;
      /**
       * Kind
       * @description Kind of the model associated with this menuitem if applicable
       * @default
       */
      kind: string;
      /**
       * Order Weight
       * @default 5000
       */
      order_weight: number;
      /** @default object */
      section: components["schemas"]["MenuSection"];
      /**
       * Children
       * @description Child objects
       */
      children?: components["schemas"]["MenuItemList"][];
    };
    /**
     * MenuSection
     * @enum {string}
     */
    MenuSection: "object" | "internal";
    /** NodeExtensionSchema */
    NodeExtensionSchema: {
      /** Id */
      id?: string | null;
      /** @default present */
      state: components["schemas"]["HashableModelState"];
      /** Kind */
      kind: string;
      /** Attributes */
      attributes?: components["schemas"]["AttributeSchema-Input"][];
      /** Relationships */
      relationships?: components["schemas"]["RelationshipSchema"][];
    };
    /** NodeSchema */
    NodeSchema: {
      /**
       * Id
       * @description The ID of the node
       */
      id?: string | null;
      /**
       * @description Expected state of the node/generic after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Node name, must be unique within a namespace and must start with an uppercase letter.
       */
      name: string;
      /**
       * Namespace
       * @description Node Namespace, Namespaces are used to organize models into logical groups and to prevent name collisions.
       */
      namespace: string;
      /**
       * Description
       * @description Short description of the model, will be visible in the frontend.
       */
      description?: string | null;
      /**
       * Label
       * @description Human friendly representation of the name/kind
       */
      label?: string | null;
      /**
       * @description Type of branch support for the model.
       * @default aware
       */
      branch: components["schemas"]["BranchSupportType"];
      /**
       * Default Filter
       * @description Default filter used to search for a node in addition to its ID. (deprecated: please use human_friendly_id instead)
       */
      default_filter?: string | null;
      /**
       * Human Friendly Id
       * @description Human friendly and unique identifier for the object.
       */
      human_friendly_id?: string[] | null;
      /**
       * Display Labels
       * @description List of attributes to use to generate the display label
       */
      display_labels?: string[] | null;
      /**
       * Include In Menu
       * @description Defines if objects of this kind should be included in the menu.
       */
      include_in_menu?: boolean | null;
      /**
       * Menu Placement
       * @description Defines where in the menu this object should be placed.
       */
      menu_placement?: string | null;
      /**
       * Icon
       * @description Defines the icon to use in the menu. Must be a valid value from the MDI library https://icon-sets.iconify.design/mdi/
       */
      icon?: string | null;
      /**
       * Order By
       * @description List of attributes to use to order the results by default
       */
      order_by?: string[] | null;
      /**
       * Uniqueness Constraints
       * @description List of multi-element uniqueness constraints that can combine relationships and attributes
       */
      uniqueness_constraints?: string[][] | null;
      /**
       * Documentation
       * @description Link to a documentation associated with this object, can be internal or external.
       */
      documentation?: string | null;
      /**
       * Attributes
       * @description Node attributes
       */
      attributes?: components["schemas"]["AttributeSchema-Input"][];
      /**
       * Relationships
       * @description Node Relationships
       */
      relationships?: components["schemas"]["RelationshipSchema"][];
      /**
       * Inherit From
       * @description List of Generic Kind that this node is inheriting from
       */
      inherit_from?: string[];
      /**
       * Generate Profile
       * @description Indicate if a profile schema should be generated for this schema
       * @default true
       */
      generate_profile: boolean;
      /**
       * Hierarchy
       * @description Internal value to track the name of the Hierarchy, must match the name of a Generic supporting hierarchical mode
       */
      hierarchy?: string | null;
      /**
       * Parent
       * @description Expected Kind for the parent node in a Hierarchy, default to the main generic defined if not defined.
       */
      parent?: string | null;
      /**
       * Children
       * @description Expected Kind for the children nodes in a Hierarchy, default to the main generic defined if not defined.
       */
      children?: string | null;
    };
    /** PasswordCredential */
    PasswordCredential: {
      /**
       * Username
       * @description Name of the user that is logging in.
       */
      username: string;
      /**
       * Password
       * @description The password of the user.
       */
      password: string;
    };
    /** QueryPayload */
    QueryPayload: {
      /** Variables */
      variables?: {
        [key: string]: string | undefined;
      };
    };
    /**
     * RelationshipCardinality
     * @enum {string}
     */
    RelationshipCardinality: "one" | "many";
    /**
     * RelationshipDeleteBehavior
     * @enum {string}
     */
    RelationshipDeleteBehavior: "no-action" | "cascade";
    /**
     * RelationshipDirection
     * @enum {string}
     */
    RelationshipDirection: "bidirectional" | "outbound" | "inbound";
    /**
     * RelationshipKind
     * @enum {string}
     */
    RelationshipKind:
      | "Generic"
      | "Attribute"
      | "Component"
      | "Parent"
      | "Group"
      | "Hierarchy"
      | "Profile";
    /** RelationshipSchema */
    RelationshipSchema: {
      /**
       * Id
       * @description The ID of the relationship schema
       */
      id?: string | null;
      /**
       * @description Expected state of the relationship after loading the schema
       * @default present
       */
      state: components["schemas"]["HashableModelState"];
      /**
       * Name
       * @description Relationship name, must be unique within a model and must be all lowercase.
       */
      name: string;
      /**
       * Peer
       * @description Type (kind) of objects supported on the other end of the relationship.
       */
      peer: string;
      /**
       * @description Defines the type of the relationship.
       * @default Generic
       */
      kind: components["schemas"]["RelationshipKind"];
      /**
       * Label
       * @description Human friendly representation of the name. Will be autogenerated if not provided
       */
      label?: string | null;
      /**
       * Description
       * @description Short description of the relationship.
       */
      description?: string | null;
      /**
       * Identifier
       * @description Unique identifier of the relationship within a model, identifiers must match to traverse a relationship on both direction.
       */
      identifier?: string | null;
      /**
       * @description Defines how many objects are expected on the other side of the relationship.
       * @default many
       */
      cardinality: components["schemas"]["RelationshipCardinality"];
      /**
       * Min Count
       * @description Defines the minimum objects allowed on the other side of the relationship.
       * @default 0
       */
      min_count: number;
      /**
       * Max Count
       * @description Defines the maximum objects allowed on the other side of the relationship.
       * @default 0
       */
      max_count: number;
      /**
       * Order Weight
       * @description Number used to order the relationship in the frontend (table and view). Lowest value will be ordered first.
       */
      order_weight?: number | null;
      /**
       * Optional
       * @description Indicate if this relationship is mandatory or optional.
       * @default true
       */
      optional: boolean;
      /** @description Type of branch support for the relatioinship, if not defined it will be determine based both peers. */
      branch?: components["schemas"]["BranchSupportType"] | null;
      /**
       * Inherited
       * @description Internal value to indicate if the relationship was inherited from a Generic node.
       * @default false
       */
      inherited: boolean;
      /**
       * @description Defines the direction of the relationship,  Unidirectional relationship are required when the same model is on both side.
       * @default bidirectional
       */
      direction: components["schemas"]["RelationshipDirection"];
      /**
       * Hierarchical
       * @description Internal attribute to track the type of hierarchy this relationship is part of, must match a valid Generic Kind
       */
      hierarchical?: string | null;
      /** @description Default is no-action. If cascade, related node(s) are deleted when this node is deleted. */
      on_delete?: components["schemas"]["RelationshipDeleteBehavior"] | null;
      /**
       * @description Type of allowed override for the relationship.
       * @default any
       */
      allow_override: components["schemas"]["AllowOverrideType"];
      /**
       * Read Only
       * @description Set the relationship as read-only, users won't be able to change its value.
       * @default false
       */
      read_only: boolean;
    };
    /** RemoteLoggingSettings */
    RemoteLoggingSettings: {
      /**
       * Enable
       * @default false
       */
      enable: boolean;
      /** Frontend Dsn */
      frontend_dsn?: string | null;
      /** Api Server Dsn */
      api_server_dsn?: string | null;
      /** Git Agent Dsn */
      git_agent_dsn?: string | null;
    };
    /** SSOInfo */
    SSOInfo: {
      /** Providers */
      providers?: components["schemas"]["SSOProviderInfo"][];
      /** Enabled */
      readonly enabled: boolean;
    };
    /**
     * SSOProtocol
     * @enum {string}
     */
    SSOProtocol: "oauth2" | "oidc";
    /** SSOProviderInfo */
    SSOProviderInfo: {
      /** Name */
      name: string;
      /** Display Label */
      display_label: string;
      /** Icon */
      icon: string;
      protocol: components["schemas"]["SSOProtocol"];
      /** Authorize Path */
      readonly authorize_path: string;
      /** Token Path */
      readonly token_path: string;
    };
    /** SchemaBranchHash */
    SchemaBranchHash: {
      /** Main */
      main: string;
      /** Nodes */
      nodes?: {
        [key: string]: string | undefined;
      };
      /** Generics */
      generics?: {
        [key: string]: string | undefined;
      };
    };
    /** SchemaDiff */
    SchemaDiff: {
      /** Added */
      added?: {
        [key: string]: components["schemas"]["HashableModelDiff"] | undefined;
      };
      /** Changed */
      changed?: {
        [key: string]: components["schemas"]["HashableModelDiff"] | undefined;
      };
      /** Removed */
      removed?: {
        [key: string]: components["schemas"]["HashableModelDiff"] | undefined;
      };
    };
    /** SchemaExtension */
    SchemaExtension: {
      /** Id */
      id?: string | null;
      /** @default present */
      state: components["schemas"]["HashableModelState"];
      /** Nodes */
      nodes?: components["schemas"]["NodeExtensionSchema"][];
    };
    /** SchemaLoadAPI */
    SchemaLoadAPI: {
      /** Version */
      version: string;
      /** Generics */
      generics?: components["schemas"]["GenericSchema"][];
      /** Nodes */
      nodes?: components["schemas"]["NodeSchema"][];
      /** @default {
       *       "state": "present",
       *       "nodes": []
       *     } */
      extensions: components["schemas"]["SchemaExtension"];
    };
    /** SchemaNamespace */
    SchemaNamespace: {
      /** Name */
      name: string;
      /** User Editable */
      user_editable: boolean;
    };
    /** SchemaReadAPI */
    SchemaReadAPI: {
      /**
       * Main
       * @description Main hash for the entire schema
       */
      main: string;
      /** Nodes */
      nodes?: components["schemas"]["APINodeSchema"][];
      /** Generics */
      generics?: components["schemas"]["APIGenericSchema"][];
      /** Profiles */
      profiles?: components["schemas"]["APIProfileSchema"][];
      /** Namespaces */
      namespaces?: components["schemas"]["SchemaNamespace"][];
    };
    /** SchemaUpdate */
    SchemaUpdate: {
      /**
       * Hash
       * @description The new hash for the entire schema
       */
      hash: string;
      /**
       * Previous Hash
       * @description The previous hash for the entire schema
       */
      previous_hash: string;
      /** @description The modifications to the schema */
      diff: components["schemas"]["SchemaDiff"];
      /**
       * Schema Updated
       * @description Indicates if the loading of the schema changed the existing schema
       */
      readonly schema_updated: boolean;
    };
    /** SchemasLoadAPI */
    SchemasLoadAPI: {
      /** Schemas */
      schemas: components["schemas"]["SchemaLoadAPI"][];
    };
    /** UploadContentPayload */
    UploadContentPayload: {
      /** Content */
      content: string;
    };
    /** UploadResponse */
    UploadResponse: {
      /** Identifier */
      identifier: string;
      /** Checksum */
      checksum: string;
    };
    /** UserToken */
    UserToken: {
      /**
       * Access Token
       * @description JWT access_token
       */
      access_token: string;
      /**
       * Refresh Token
       * @description JWT refresh_token
       */
      refresh_token: string;
    };
    /** UserTokenWithUrl */
    UserTokenWithUrl: {
      /**
       * Access Token
       * @description JWT access_token
       */
      access_token: string;
      /**
       * Refresh Token
       * @description JWT refresh_token
       */
      refresh_token: string;
      /**
       * Final Url
       * @description The final url after logged in
       */
      final_url: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_artifact_api_artifact__artifact_id__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
      };
      header?: never;
      path: {
        artifact_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  generate_artifact_api_artifact_generate__artifact_definition_id__post: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
      };
      header?: never;
      path: {
        artifact_definition_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ArtifactGeneratePayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  login_user_api_auth_login_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordCredential"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserToken"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  refresh_jwt_token_api_auth_refresh_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AccessTokenResponse"];
        };
      };
    };
  };
  logout_api_auth_logout_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  get_diff_data_api_diff_data_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BranchDiff"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_diff_schema_api_diff_schema_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BranchDiff"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_diff_files_api_diff_files_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]:
              | {
                  [key: string]: components["schemas"]["BranchDiffRepository"] | undefined;
                }
              | undefined;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_diff_artifacts_api_diff_artifacts_get: {
    parameters: {
      query?: {
        time_from?: string | null;
        time_to?: string | null;
        branch_only?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: components["schemas"]["BranchDiffArtifact"] | undefined;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_file_api_file__repository_id___file_path__get: {
    parameters: {
      query?: {
        commit?: string | null;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
      };
      header?: never;
      path: {
        repository_id: string;
        file_path: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_config_api_config_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConfigAPI"];
        };
      };
    };
  };
  get_info_api_info_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InfoAPI"];
        };
      };
    };
  };
  get_menu_api_menu_get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InterfaceMenu"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_new_menu_api_menu_new_get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Menu"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  authorize_api_oauth2__provider_name__authorize_get: {
    parameters: {
      query?: {
        final_url?: string | null;
      };
      header?: never;
      path: {
        provider_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  token_api_oauth2__provider_name__token_get: {
    parameters: {
      query: {
        state: string;
        code: string;
      };
      header?: never;
      path: {
        provider_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserTokenWithUrl"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  authorize_api_oidc__provider_name__authorize_get: {
    parameters: {
      query?: {
        final_url?: string | null;
      };
      header?: never;
      path: {
        provider_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  token_api_oidc__provider_name__token_get: {
    parameters: {
      query: {
        state: string;
        code: string;
      };
      header?: never;
      path: {
        provider_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserTokenWithUrl"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  graphql_query_get_api_query__query_id__get: {
    parameters: {
      query?: {
        /** @description List of subscribers to attach to the CoreGraphQLQueryGroup */
        subscribers?: string[];
        /** @description When True create or update a CoreGraphQLQueryGroup with all nodes related to this query. */
        update_group?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
      };
      header?: never;
      path: {
        /** @description ID or Name of the GraphQL query to execute */
        query_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  graphql_query_post_api_query__query_id__post: {
    parameters: {
      query?: {
        /** @description List of subscribers to attach to the CoreGraphQLQueryGroup */
        subscribers?: string[];
        /** @description When True create or update a CoreGraphQLQueryGroup with all nodes related to this query. */
        update_group?: boolean;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
      };
      header?: never;
      path: {
        /** @description ID or Name of the GraphQL query to execute */
        query_id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["QueryPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_schema_api_schema_get: {
    parameters: {
      query?: {
        namespaces?: string[] | null;
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SchemaReadAPI"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_schema_summary_api_schema_summary_get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SchemaBranchHash"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_schema_by_kind_api_schema__schema_kind__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path: {
        schema_kind: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["APIProfileSchema"]
            | components["schemas"]["APINodeSchema"]
            | components["schemas"]["APIGenericSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_json_schema_by_kind_api_schema_json_schema__schema_kind__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path: {
        schema_kind: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JSONSchema"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  load_schema_api_schema_load_post: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemasLoadAPI"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SchemaUpdate"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  check_schema_api_schema_check_post: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemasLoadAPI"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_file_api_storage_object__identifier__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        identifier: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  upload_content_api_storage_upload_content_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UploadContentPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UploadResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  upload_file_api_storage_upload_file_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_file_api_storage_upload_file_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UploadResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  transform_python_api_transform_python__transform_id__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
      };
      header?: never;
      path: {
        transform_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  transform_jinja2_api_transform_jinja2__transform_id__get: {
    parameters: {
      query?: {
        /** @description Name of the branch to use for the query */
        branch?: string | null;
        /** @description Time to use for the query, in absolute or relative format */
        at?: string | null;
      };
      header?: never;
      path: {
        /** @description ID or Name of the Jinja2 Transform to render */
        transform_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
