import { Button } from "@/components/buttons/button-primitive";
import { SearchInput } from "@/components/ui/search-input";
import { getGroupsQuery } from "@/graphql/queries/groups/getGroups";
import useQuery from "@/hooks/useQuery";
import ErrorScreen from "@/screens/errors/error-screen";
import NoDataFound from "@/screens/errors/no-data-found";
import AddGroupTriggerButton from "@/screens/groups/add-group-trigger-button";
import ObjectGroupsList from "@/screens/groups/object-groups-list";
import { GroupDataFromAPI } from "@/screens/groups/types";
import LoadingScreen from "@/screens/loading-screen/loading-screen";
import { IModelSchema } from "@/state/atoms/schema.atom";
import { classNames } from "@/utils/common";
import { gql } from "@apollo/client";
import { Icon } from "@iconify-icon/react";
import { useState } from "react";

export type GroupsManagerProps = {
  className?: string;
  schema: IModelSchema;
  objectId: string;
  onUpdateCompleted?: () => void;
};

export const GroupsManager = ({ className, schema, objectId }: GroupsManagerProps) => {
  const [query, setQuery] = useState("");
  const [displayAutoGenerated, setDisplayAutoGenerated] = useState(false);

  const { loading, error, data } = useQuery(
    gql(
      getGroupsQuery({
        objectKind: schema.kind,
        objectId,
      })
    )
  );

  if (loading) {
    return <LoadingScreen />;
  }

  if (error) {
    return <ErrorScreen message={error.message} />;
  }

  const currentObjectData = data[schema.kind!]?.edges[0]?.node;

  if (!currentObjectData) {
    return (
      <NoDataFound
        message={
          <div>
            <div className="text-center mb-4">No data found.</div>
            <div className="text-sm">
              <span className="font-semibold">Kind</span>: {schema.kind}
            </div>
            <div className="text-sm">
              <span className="font-semibold">Id</span>: {objectId}
            </div>
          </div>
        }
      />
    );
  }

  const currentObjectGroups: Array<GroupDataFromAPI> =
    currentObjectData.member_of_groups?.edges?.map(({ node }: { node: GroupDataFromAPI }) => node);
  const hasAutoGeneratedGroups = currentObjectGroups.some(
    (group) => group.group_type?.value === "internal"
  );

  const groupsFilteredBySearch =
    query === ""
      ? currentObjectGroups
      : currentObjectGroups.filter((group) =>
          group.display_label.toLowerCase().includes(query.toLowerCase())
        );

  const filteredVisibleGroups = groupsFilteredBySearch.filter(
    (n) => displayAutoGenerated || n.group_type?.value !== "internal"
  );

  return (
    <div className={classNames("h-full flex flex-col gap-2", className)}>
      <div className="flex gap-2">
        <SearchInput
          containerClassName="flex-grow"
          className="h-9"
          onChange={(e) => setQuery(e.target.value)}
          placeholder="filter groups..."
        />

        <AddGroupTriggerButton schema={schema} objectId={objectId} />
      </div>

      {hasAutoGeneratedGroups && (
        <Button
          onClick={() => setDisplayAutoGenerated((v) => !v)}
          className="ml-auto text-custom-blue-700 shrink-0"
          variant="ghost"
          size="sm"
        >
          auto-generated
          <Icon className="ml-1" icon={displayAutoGenerated ? "mdi:eye" : "mdi:eye-off"} />
        </Button>
      )}

      <ObjectGroupsList
        objectId={objectId}
        groups={filteredVisibleGroups}
        className="flex-grow overflow-auto"
      />
    </div>
  );
};
